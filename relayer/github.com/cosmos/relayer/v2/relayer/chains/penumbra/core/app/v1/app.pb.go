// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/core/app/v1/app.proto

package appv1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	v111 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/auction/v1"
	v12 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/community_pool/v1"
	v110 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/dex/v1"
	v17 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/distributions/v1"
	v16 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/fee/v1"
	v18 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/funding/v1"
	v13 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/governance/v1"
	v14 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/ibc/v1"
	v11 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/sct/v1"
	v19 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/shielded_pool/v1"
	v15 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/stake/v1"
	v1 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/transaction/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Requests the list of all transactions that occurred within a given block.
type TransactionsByHeightRequest struct {
	// The block height to retrieve.
	BlockHeight uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *TransactionsByHeightRequest) Reset()         { *m = TransactionsByHeightRequest{} }
func (m *TransactionsByHeightRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionsByHeightRequest) ProtoMessage()    {}
func (*TransactionsByHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd5d94926a61eaaf, []int{0}
}
func (m *TransactionsByHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionsByHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionsByHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionsByHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionsByHeightRequest.Merge(m, src)
}
func (m *TransactionsByHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionsByHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionsByHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionsByHeightRequest proto.InternalMessageInfo

func (m *TransactionsByHeightRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// A transaction that appeared within a given block.
type TransactionsByHeightResponse struct {
	// The transactions.
	Transactions []*v1.Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// The block height.
	BlockHeight uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *TransactionsByHeightResponse) Reset()         { *m = TransactionsByHeightResponse{} }
func (m *TransactionsByHeightResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionsByHeightResponse) ProtoMessage()    {}
func (*TransactionsByHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd5d94926a61eaaf, []int{1}
}
func (m *TransactionsByHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionsByHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionsByHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionsByHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionsByHeightResponse.Merge(m, src)
}
func (m *TransactionsByHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionsByHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionsByHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionsByHeightResponse proto.InternalMessageInfo

func (m *TransactionsByHeightResponse) GetTransactions() []*v1.Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *TransactionsByHeightResponse) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type AppParameters struct {
	// The chain identifier.
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Sct module parameters.
	SctParams *v11.SctParameters `protobuf:"bytes,2,opt,name=sct_params,json=sctParams,proto3" json:"sct_params,omitempty"`
	// Community Pool module parameters.
	CommunityPoolParams *v12.CommunityPoolParameters `protobuf:"bytes,3,opt,name=community_pool_params,json=communityPoolParams,proto3" json:"community_pool_params,omitempty"`
	// Governance module parameters.
	GovernanceParams *v13.GovernanceParameters `protobuf:"bytes,4,opt,name=governance_params,json=governanceParams,proto3" json:"governance_params,omitempty"`
	// IBC module parameters.
	IbcParams *v14.IbcParameters `protobuf:"bytes,5,opt,name=ibc_params,json=ibcParams,proto3" json:"ibc_params,omitempty"`
	// Stake module parameters.
	StakeParams *v15.StakeParameters `protobuf:"bytes,6,opt,name=stake_params,json=stakeParams,proto3" json:"stake_params,omitempty"`
	// Fee module parameters.
	FeeParams *v16.FeeParameters `protobuf:"bytes,7,opt,name=fee_params,json=feeParams,proto3" json:"fee_params,omitempty"`
	// Distributions module parameters.
	DistributionsParams *v17.DistributionsParameters `protobuf:"bytes,8,opt,name=distributions_params,json=distributionsParams,proto3" json:"distributions_params,omitempty"`
	// Funding module parameters.
	FundingParams *v18.FundingParameters `protobuf:"bytes,9,opt,name=funding_params,json=fundingParams,proto3" json:"funding_params,omitempty"`
	// Shielded pool module parameters.
	ShieldedPoolParams *v19.ShieldedPoolParameters `protobuf:"bytes,10,opt,name=shielded_pool_params,json=shieldedPoolParams,proto3" json:"shielded_pool_params,omitempty"`
	// DEX module parameters.
	DexParams *v110.DexParameters `protobuf:"bytes,11,opt,name=dex_params,json=dexParams,proto3" json:"dex_params,omitempty"`
	// Auction module parameters.
	AuctionParams *v111.AuctionParameters `protobuf:"bytes,12,opt,name=auction_params,json=auctionParams,proto3" json:"auction_params,omitempty"`
}

func (m *AppParameters) Reset()         { *m = AppParameters{} }
func (m *AppParameters) String() string { return proto.CompactTextString(m) }
func (*AppParameters) ProtoMessage()    {}
func (*AppParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd5d94926a61eaaf, []int{2}
}
func (m *AppParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppParameters.Merge(m, src)
}
func (m *AppParameters) XXX_Size() int {
	return m.Size()
}
func (m *AppParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_AppParameters.DiscardUnknown(m)
}

var xxx_messageInfo_AppParameters proto.InternalMessageInfo

func (m *AppParameters) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *AppParameters) GetSctParams() *v11.SctParameters {
	if m != nil {
		return m.SctParams
	}
	return nil
}

func (m *AppParameters) GetCommunityPoolParams() *v12.CommunityPoolParameters {
	if m != nil {
		return m.CommunityPoolParams
	}
	return nil
}

func (m *AppParameters) GetGovernanceParams() *v13.GovernanceParameters {
	if m != nil {
		return m.GovernanceParams
	}
	return nil
}

func (m *AppParameters) GetIbcParams() *v14.IbcParameters {
	if m != nil {
		return m.IbcParams
	}
	return nil
}

func (m *AppParameters) GetStakeParams() *v15.StakeParameters {
	if m != nil {
		return m.StakeParams
	}
	return nil
}

func (m *AppParameters) GetFeeParams() *v16.FeeParameters {
	if m != nil {
		return m.FeeParams
	}
	return nil
}

func (m *AppParameters) GetDistributionsParams() *v17.DistributionsParameters {
	if m != nil {
		return m.DistributionsParams
	}
	return nil
}

func (m *AppParameters) GetFundingParams() *v18.FundingParameters {
	if m != nil {
		return m.FundingParams
	}
	return nil
}

func (m *AppParameters) GetShieldedPoolParams() *v19.ShieldedPoolParameters {
	if m != nil {
		return m.ShieldedPoolParams
	}
	return nil
}

func (m *AppParameters) GetDexParams() *v110.DexParameters {
	if m != nil {
		return m.DexParams
	}
	return nil
}

func (m *AppParameters) GetAuctionParams() *v111.AuctionParameters {
	if m != nil {
		return m.AuctionParams
	}
	return nil
}

// Requests the global configuration data for the app.
type AppParametersRequest struct {
}

func (m *AppParametersRequest) Reset()         { *m = AppParametersRequest{} }
func (m *AppParametersRequest) String() string { return proto.CompactTextString(m) }
func (*AppParametersRequest) ProtoMessage()    {}
func (*AppParametersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd5d94926a61eaaf, []int{3}
}
func (m *AppParametersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppParametersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppParametersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppParametersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppParametersRequest.Merge(m, src)
}
func (m *AppParametersRequest) XXX_Size() int {
	return m.Size()
}
func (m *AppParametersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppParametersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppParametersRequest proto.InternalMessageInfo

type AppParametersResponse struct {
	AppParameters *AppParameters `protobuf:"bytes,1,opt,name=app_parameters,json=appParameters,proto3" json:"app_parameters,omitempty"`
}

func (m *AppParametersResponse) Reset()         { *m = AppParametersResponse{} }
func (m *AppParametersResponse) String() string { return proto.CompactTextString(m) }
func (*AppParametersResponse) ProtoMessage()    {}
func (*AppParametersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd5d94926a61eaaf, []int{4}
}
func (m *AppParametersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppParametersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppParametersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppParametersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppParametersResponse.Merge(m, src)
}
func (m *AppParametersResponse) XXX_Size() int {
	return m.Size()
}
func (m *AppParametersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AppParametersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AppParametersResponse proto.InternalMessageInfo

func (m *AppParametersResponse) GetAppParameters() *AppParameters {
	if m != nil {
		return m.AppParameters
	}
	return nil
}

type GenesisAppState struct {
	// Types that are valid to be assigned to GenesisAppState:
	//	*GenesisAppState_GenesisContent
	//	*GenesisAppState_GenesisCheckpoint
	GenesisAppState isGenesisAppState_GenesisAppState `protobuf_oneof:"genesis_app_state"`
}

func (m *GenesisAppState) Reset()         { *m = GenesisAppState{} }
func (m *GenesisAppState) String() string { return proto.CompactTextString(m) }
func (*GenesisAppState) ProtoMessage()    {}
func (*GenesisAppState) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd5d94926a61eaaf, []int{5}
}
func (m *GenesisAppState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisAppState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisAppState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisAppState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisAppState.Merge(m, src)
}
func (m *GenesisAppState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisAppState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisAppState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisAppState proto.InternalMessageInfo

type isGenesisAppState_GenesisAppState interface {
	isGenesisAppState_GenesisAppState()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GenesisAppState_GenesisContent struct {
	GenesisContent *GenesisContent `protobuf:"bytes,1,opt,name=genesis_content,json=genesisContent,proto3,oneof" json:"genesis_content,omitempty"`
}
type GenesisAppState_GenesisCheckpoint struct {
	GenesisCheckpoint []byte `protobuf:"bytes,2,opt,name=genesis_checkpoint,json=genesisCheckpoint,proto3,oneof" json:"genesis_checkpoint,omitempty"`
}

func (*GenesisAppState_GenesisContent) isGenesisAppState_GenesisAppState()    {}
func (*GenesisAppState_GenesisCheckpoint) isGenesisAppState_GenesisAppState() {}

func (m *GenesisAppState) GetGenesisAppState() isGenesisAppState_GenesisAppState {
	if m != nil {
		return m.GenesisAppState
	}
	return nil
}

func (m *GenesisAppState) GetGenesisContent() *GenesisContent {
	if x, ok := m.GetGenesisAppState().(*GenesisAppState_GenesisContent); ok {
		return x.GenesisContent
	}
	return nil
}

func (m *GenesisAppState) GetGenesisCheckpoint() []byte {
	if x, ok := m.GetGenesisAppState().(*GenesisAppState_GenesisCheckpoint); ok {
		return x.GenesisCheckpoint
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GenesisAppState) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GenesisAppState_GenesisContent)(nil),
		(*GenesisAppState_GenesisCheckpoint)(nil),
	}
}

type GenesisContent struct {
	// The initial chain identifier.
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Stake module genesis state.
	StakeContent *v15.GenesisContent `protobuf:"bytes,2,opt,name=stake_content,json=stakeContent,proto3" json:"stake_content,omitempty"`
	// Shielded pool module genesis state.
	ShieldedPoolContent *v19.GenesisContent `protobuf:"bytes,3,opt,name=shielded_pool_content,json=shieldedPoolContent,proto3" json:"shielded_pool_content,omitempty"`
	// Governance module genesis state.
	GovernanceContent *v13.GenesisContent `protobuf:"bytes,4,opt,name=governance_content,json=governanceContent,proto3" json:"governance_content,omitempty"`
	// IBC module genesis state.
	IbcContent *v14.GenesisContent `protobuf:"bytes,5,opt,name=ibc_content,json=ibcContent,proto3" json:"ibc_content,omitempty"`
	// Sct module genesis state.
	SctContent *v11.GenesisContent `protobuf:"bytes,6,opt,name=sct_content,json=sctContent,proto3" json:"sct_content,omitempty"`
	// Community Pool module genesis state.
	CommunityPoolContent *v12.GenesisContent `protobuf:"bytes,7,opt,name=community_pool_content,json=communityPoolContent,proto3" json:"community_pool_content,omitempty"`
	// Fee module genesis state.
	FeeContent *v16.GenesisContent `protobuf:"bytes,8,opt,name=fee_content,json=feeContent,proto3" json:"fee_content,omitempty"`
	// Distributions module genesis state.
	DistributionsContent *v17.GenesisContent `protobuf:"bytes,9,opt,name=distributions_content,json=distributionsContent,proto3" json:"distributions_content,omitempty"`
	// Funding module genesis state.
	FundingContent *v18.GenesisContent `protobuf:"bytes,10,opt,name=funding_content,json=fundingContent,proto3" json:"funding_content,omitempty"`
	// DEX component genesis state.
	DexContent *v110.GenesisContent `protobuf:"bytes,11,opt,name=dex_content,json=dexContent,proto3" json:"dex_content,omitempty"`
	// Auction component genesis state.
	AuctionContent *v111.GenesisContent `protobuf:"bytes,12,opt,name=auction_content,json=auctionContent,proto3" json:"auction_content,omitempty"`
}

func (m *GenesisContent) Reset()         { *m = GenesisContent{} }
func (m *GenesisContent) String() string { return proto.CompactTextString(m) }
func (*GenesisContent) ProtoMessage()    {}
func (*GenesisContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd5d94926a61eaaf, []int{6}
}
func (m *GenesisContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisContent.Merge(m, src)
}
func (m *GenesisContent) XXX_Size() int {
	return m.Size()
}
func (m *GenesisContent) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisContent.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisContent proto.InternalMessageInfo

func (m *GenesisContent) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *GenesisContent) GetStakeContent() *v15.GenesisContent {
	if m != nil {
		return m.StakeContent
	}
	return nil
}

func (m *GenesisContent) GetShieldedPoolContent() *v19.GenesisContent {
	if m != nil {
		return m.ShieldedPoolContent
	}
	return nil
}

func (m *GenesisContent) GetGovernanceContent() *v13.GenesisContent {
	if m != nil {
		return m.GovernanceContent
	}
	return nil
}

func (m *GenesisContent) GetIbcContent() *v14.GenesisContent {
	if m != nil {
		return m.IbcContent
	}
	return nil
}

func (m *GenesisContent) GetSctContent() *v11.GenesisContent {
	if m != nil {
		return m.SctContent
	}
	return nil
}

func (m *GenesisContent) GetCommunityPoolContent() *v12.GenesisContent {
	if m != nil {
		return m.CommunityPoolContent
	}
	return nil
}

func (m *GenesisContent) GetFeeContent() *v16.GenesisContent {
	if m != nil {
		return m.FeeContent
	}
	return nil
}

func (m *GenesisContent) GetDistributionsContent() *v17.GenesisContent {
	if m != nil {
		return m.DistributionsContent
	}
	return nil
}

func (m *GenesisContent) GetFundingContent() *v18.GenesisContent {
	if m != nil {
		return m.FundingContent
	}
	return nil
}

func (m *GenesisContent) GetDexContent() *v110.GenesisContent {
	if m != nil {
		return m.DexContent
	}
	return nil
}

func (m *GenesisContent) GetAuctionContent() *v111.GenesisContent {
	if m != nil {
		return m.AuctionContent
	}
	return nil
}

// An event triggering when the app parameters change.
type EventAppParametersChange struct {
	// The new parameters, in their entirety.
	NewParameters *AppParameters `protobuf:"bytes,1,opt,name=new_parameters,json=newParameters,proto3" json:"new_parameters,omitempty"`
}

func (m *EventAppParametersChange) Reset()         { *m = EventAppParametersChange{} }
func (m *EventAppParametersChange) String() string { return proto.CompactTextString(m) }
func (*EventAppParametersChange) ProtoMessage()    {}
func (*EventAppParametersChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd5d94926a61eaaf, []int{7}
}
func (m *EventAppParametersChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAppParametersChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAppParametersChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAppParametersChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAppParametersChange.Merge(m, src)
}
func (m *EventAppParametersChange) XXX_Size() int {
	return m.Size()
}
func (m *EventAppParametersChange) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAppParametersChange.DiscardUnknown(m)
}

var xxx_messageInfo_EventAppParametersChange proto.InternalMessageInfo

func (m *EventAppParametersChange) GetNewParameters() *AppParameters {
	if m != nil {
		return m.NewParameters
	}
	return nil
}

func init() {
	proto.RegisterType((*TransactionsByHeightRequest)(nil), "penumbra.core.app.v1.TransactionsByHeightRequest")
	proto.RegisterType((*TransactionsByHeightResponse)(nil), "penumbra.core.app.v1.TransactionsByHeightResponse")
	proto.RegisterType((*AppParameters)(nil), "penumbra.core.app.v1.AppParameters")
	proto.RegisterType((*AppParametersRequest)(nil), "penumbra.core.app.v1.AppParametersRequest")
	proto.RegisterType((*AppParametersResponse)(nil), "penumbra.core.app.v1.AppParametersResponse")
	proto.RegisterType((*GenesisAppState)(nil), "penumbra.core.app.v1.GenesisAppState")
	proto.RegisterType((*GenesisContent)(nil), "penumbra.core.app.v1.GenesisContent")
	proto.RegisterType((*EventAppParametersChange)(nil), "penumbra.core.app.v1.EventAppParametersChange")
}

func init() { proto.RegisterFile("penumbra/core/app/v1/app.proto", fileDescriptor_cd5d94926a61eaaf) }

var fileDescriptor_cd5d94926a61eaaf = []byte{
	// 1215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcd, 0x72, 0x1b, 0x45,
	0x17, 0xf5, 0xd8, 0xfe, 0x1c, 0xb9, 0x25, 0xdb, 0x5f, 0xc6, 0x72, 0x30, 0x86, 0x52, 0x19, 0xc1,
	0xc2, 0xfc, 0x8d, 0x32, 0xa2, 0xa0, 0x40, 0xa1, 0xa8, 0x48, 0x86, 0xd8, 0xa1, 0x48, 0x45, 0xc8,
	0xc1, 0x0b, 0x70, 0x95, 0x6a, 0xd4, 0xd3, 0x92, 0xa6, 0x2c, 0xcd, 0x34, 0xd3, 0xad, 0x89, 0xbd,
	0xe0, 0x1d, 0xf2, 0x0c, 0xac, 0x28, 0xd6, 0x3c, 0x00, 0x4b, 0x8a, 0x55, 0x96, 0x2c, 0x29, 0x7b,
	0xc7, 0x0b, 0x64, 0x4b, 0xf5, 0x9f, 0xd4, 0x3d, 0xd6, 0x64, 0x14, 0x56, 0xea, 0xbe, 0x7d, 0xef,
	0x39, 0xb7, 0x6f, 0xdf, 0x3e, 0xad, 0x01, 0x15, 0x8c, 0xc2, 0xc9, 0xb8, 0x17, 0x7b, 0x35, 0x18,
	0xc5, 0xa8, 0xe6, 0x61, 0x5c, 0x4b, 0x5c, 0xf6, 0xe3, 0xe0, 0x38, 0xa2, 0x91, 0x5d, 0x56, 0xeb,
	0x0e, 0x5b, 0x77, 0xd8, 0x42, 0xe2, 0xee, 0xdd, 0x35, 0xa3, 0x60, 0x34, 0xc6, 0x51, 0x88, 0x42,
	0x5a, 0xf3, 0x26, 0x90, 0x06, 0x51, 0xc8, 0x31, 0xc4, 0x50, 0xe0, 0xec, 0x7d, 0x91, 0x15, 0x01,
	0xa3, 0xf1, 0x78, 0x12, 0x06, 0xf4, 0xb2, 0x8b, 0xa3, 0x68, 0xc4, 0x02, 0x4d, 0x8b, 0x8c, 0x3f,
	0xc8, 0x8a, 0xf7, 0xd1, 0x05, 0x0b, 0xf2, 0xd1, 0x85, 0xf4, 0xfc, 0x3c, 0xd3, 0x33, 0x20, 0x34,
	0x0e, 0x7a, 0x13, 0x96, 0x15, 0xe1, 0x31, 0xba, 0x21, 0x8f, 0xa7, 0x8f, 0x10, 0x8b, 0xe9, 0x23,
	0x24, 0x3d, 0x33, 0x6b, 0xd0, 0x9f, 0x84, 0x7e, 0x10, 0x0e, 0xb8, 0xb7, 0x18, 0xca, 0x88, 0x4f,
	0xb2, 0x22, 0x06, 0x51, 0x82, 0xe2, 0xd0, 0x0b, 0x21, 0xa7, 0x98, 0xcd, 0xf2, 0x72, 0x0a, 0x7a,
	0x90, 0x05, 0x04, 0x3d, 0x98, 0xe7, 0x49, 0x20, 0x65, 0x9e, 0x04, 0xd2, 0xbc, 0x2a, 0x91, 0x61,
	0x80, 0x46, 0x3e, 0xf2, 0xa7, 0xc7, 0x61, 0x18, 0x64, 0xf4, 0x07, 0x99, 0xd1, 0xd4, 0x3b, 0xe7,
	0x9b, 0xe0, 0x03, 0xe9, 0xed, 0x98, 0xde, 0x34, 0xf6, 0x42, 0xe2, 0x4d, 0xfb, 0x44, 0x9b, 0x0a,
	0xff, 0xea, 0x7d, 0xf0, 0xc6, 0x93, 0x99, 0x91, 0xb4, 0x2e, 0x8f, 0x51, 0x30, 0x18, 0xd2, 0x0e,
	0xfa, 0x71, 0x82, 0x08, 0xb5, 0xdf, 0x02, 0xa5, 0xde, 0x28, 0x82, 0xe7, 0xdd, 0x21, 0x37, 0xef,
	0x2e, 0xef, 0x5b, 0x07, 0xab, 0x9d, 0x22, 0xb7, 0x09, 0xcf, 0xea, 0x33, 0x0b, 0xbc, 0x39, 0x1f,
	0x82, 0xe0, 0x28, 0x24, 0xc8, 0x7e, 0x04, 0x4a, 0x1a, 0x2f, 0xd9, 0xb5, 0xf6, 0x57, 0x0e, 0x8a,
	0xf5, 0x77, 0x1d, 0xb3, 0xdb, 0xf5, 0xd4, 0x12, 0xd7, 0xd1, 0x10, 0x3b, 0x46, 0xf8, 0x22, 0x29,
	0xfd, 0x5e, 0x00, 0x1b, 0x4d, 0x8c, 0xdb, 0x5e, 0xec, 0x8d, 0x11, 0x45, 0x31, 0xb1, 0x5f, 0x07,
	0x05, 0x38, 0xf4, 0x82, 0xb0, 0x1b, 0xf8, 0xbb, 0xd6, 0xbe, 0x75, 0xb0, 0xde, 0xb9, 0xc5, 0xe7,
	0x0f, 0x7d, 0xfb, 0x1b, 0x00, 0x08, 0xa4, 0x5d, 0xcc, 0x9c, 0x09, 0x47, 0x2b, 0xd6, 0x3f, 0x4c,
	0x25, 0x37, 0x2d, 0xba, 0xc3, 0x4e, 0x35, 0x71, 0x9d, 0x13, 0x48, 0x67, 0xe8, 0x9d, 0x75, 0x22,
	0xa7, 0xc4, 0x4e, 0xc0, 0x8e, 0x79, 0xa7, 0x14, 0xf0, 0x0a, 0x07, 0x6e, 0x65, 0x02, 0xa7, 0x6e,
	0x62, 0xe2, 0x3a, 0x87, 0xca, 0xd2, 0x8e, 0xa2, 0x91, 0xc6, 0xb6, 0x0d, 0x6f, 0x2c, 0x10, 0x7b,
	0x08, 0x6e, 0xcf, 0x7a, 0x59, 0x71, 0xae, 0x72, 0xce, 0x7b, 0x99, 0x9c, 0x5a, 0xf7, 0x27, 0xae,
	0x73, 0x34, 0x9d, 0x69, 0x64, 0xff, 0x1f, 0x98, 0x56, 0xc2, 0xea, 0x15, 0xf4, 0xa0, 0xa2, 0xf8,
	0x5f, 0x4e, 0xbd, 0xd8, 0x7d, 0x49, 0x5c, 0xe7, 0x61, 0x0f, 0xea, 0xf5, 0x0a, 0xe4, 0x94, 0xd8,
	0x4f, 0x40, 0x89, 0xb7, 0xaf, 0xc2, 0x5b, 0xe3, 0x78, 0x6e, 0x76, 0xfd, 0x79, 0xaf, 0xb3, 0x13,
	0x60, 0x03, 0x0d, 0xb3, 0x48, 0xa6, 0x06, 0x9e, 0x63, 0x1f, 0x4d, 0x31, 0x6f, 0xe5, 0xe4, 0xc8,
	0x74, 0x26, 0x71, 0x9d, 0x07, 0x48, 0xc7, 0x5b, 0xef, 0x23, 0x85, 0x46, 0x41, 0xd9, 0x90, 0x2f,
	0x85, 0x5b, 0xe0, 0xb8, 0xcd, 0x4c, 0x5c, 0x53, 0xf3, 0x12, 0xd7, 0xf9, 0x52, 0x37, 0xe8, 0x27,
	0xea, 0xdf, 0x58, 0x20, 0xf6, 0x19, 0xd8, 0x94, 0x92, 0xa6, 0xf8, 0xd6, 0x39, 0xdf, 0xc7, 0xd9,
	0xfb, 0x90, 0x0a, 0xc8, 0xf6, 0x22, 0x86, 0x1a, 0xc7, 0x46, 0x5f, 0x33, 0x11, 0x3b, 0x06, 0x65,
	0x43, 0x6c, 0x14, 0x07, 0xe0, 0x1c, 0xf7, 0xb3, 0xeb, 0x6f, 0x28, 0x14, 0x3b, 0x07, 0x69, 0x48,
	0x35, 0xa9, 0x4d, 0xd2, 0x76, 0x7e, 0x2a, 0x3e, 0xba, 0x50, 0x4c, 0xc5, 0x9c, 0x53, 0x61, 0xaf,
	0x0c, 0xab, 0x19, 0xba, 0xd0, 0x4f, 0xc5, 0x97, 0x53, 0x5e, 0x1f, 0xf9, 0xec, 0x29, 0xc4, 0x52,
	0x4e, 0x7d, 0xd4, 0x2b, 0x99, 0xb8, 0x4e, 0x53, 0x0c, 0xf5, 0xfa, 0x78, 0x9a, 0x89, 0x54, 0xef,
	0x80, 0xb2, 0xa1, 0x20, 0x52, 0x10, 0xab, 0x10, 0xec, 0xa4, 0xec, 0x52, 0xe5, 0xbe, 0x06, 0x9b,
	0x1e, 0xc6, 0x22, 0x15, 0xbe, 0xc2, 0x75, 0xa6, 0x58, 0x7f, 0xdb, 0x99, 0xf7, 0xaa, 0x3b, 0x26,
	0xc8, 0x86, 0xa7, 0x4f, 0xab, 0xbf, 0x58, 0x60, 0xeb, 0x08, 0x85, 0x88, 0x04, 0xa4, 0x89, 0xf1,
	0x09, 0xf5, 0x28, 0xb2, 0x1f, 0x83, 0xad, 0x81, 0x30, 0x75, 0x61, 0x14, 0x52, 0x14, 0x52, 0x49,
	0xf0, 0xce, 0x7c, 0x02, 0x19, 0x7f, 0x28, 0x7c, 0x8f, 0x97, 0x3a, 0x9b, 0x03, 0xc3, 0x62, 0xd7,
	0x80, 0x3d, 0x05, 0x1c, 0x22, 0x78, 0x8e, 0xa3, 0x20, 0x14, 0x6a, 0x5a, 0x3a, 0x5e, 0xea, 0xdc,
	0x56, 0xde, 0xd3, 0xa5, 0xd6, 0x36, 0x50, 0xc6, 0x2e, 0xdb, 0x29, 0x61, 0x69, 0x55, 0x7f, 0x2b,
	0x80, 0x4d, 0x93, 0xea, 0x65, 0x5a, 0xfb, 0x1d, 0xd8, 0x10, 0xb7, 0x5d, 0x6d, 0x41, 0xc8, 0xed,
	0xdd, 0xfc, 0xeb, 0x6e, 0x72, 0x74, 0x84, 0x68, 0x28, 0xc6, 0x11, 0xd8, 0x31, 0x9b, 0x59, 0xc1,
	0x0b, 0xd1, 0xfd, 0x74, 0xf1, 0x6e, 0x4e, 0xd1, 0x6c, 0xeb, 0x5d, 0xac, 0xd8, 0x7c, 0x60, 0x6b,
	0x52, 0xab, 0xa8, 0x56, 0x73, 0x9a, 0x2f, 0xa5, 0xb5, 0x26, 0x8f, 0xa6, 0xdd, 0x8a, 0xe5, 0x31,
	0x28, 0x32, 0x99, 0x55, 0xf0, 0x42, 0x67, 0x9d, 0x3c, 0x9d, 0x4d, 0xe1, 0x32, 0xa5, 0xd6, 0x00,
	0xd9, 0x3b, 0xa7, 0x00, 0xd7, 0x72, 0x00, 0xe5, 0x43, 0x97, 0x06, 0x24, 0x90, 0x2a, 0xc0, 0x08,
	0xdc, 0x49, 0x3d, 0x75, 0x0a, 0x5b, 0x08, 0xee, 0x67, 0xaf, 0xf0, 0xd6, 0xa5, 0x68, 0xca, 0xc6,
	0x13, 0xa7, 0xed, 0x80, 0xa9, 0xba, 0x62, 0x29, 0xe4, 0xec, 0x40, 0xca, 0x7a, 0x7a, 0x07, 0x7d,
	0x34, 0xad, 0xf1, 0x18, 0xec, 0x98, 0xc2, 0xae, 0xa0, 0xd7, 0x73, 0xfa, 0xe6, 0x86, 0xb2, 0xa7,
	0xf3, 0x37, 0x1c, 0x14, 0xdd, 0x0f, 0x60, 0x4b, 0x29, 0xba, 0x22, 0x12, 0x72, 0x5b, 0x5f, 0x44,
	0xd2, 0x53, 0x14, 0xea, 0x71, 0xd0, 0x8a, 0xc3, 0xc4, 0x55, 0x01, 0x17, 0x73, 0x8a, 0x23, 0xd5,
	0x35, 0x5d, 0x1c, 0x1f, 0x5d, 0x68, 0xd9, 0x2a, 0x7d, 0x55, 0xa0, 0xa5, 0x9c, 0x6c, 0x35, 0x81,
	0x4d, 0x67, 0x2b, 0x97, 0xe4, 0xbc, 0xda, 0x07, 0xbb, 0x5f, 0x25, 0x28, 0xa4, 0x86, 0x0c, 0x1e,
	0x0e, 0xbd, 0x70, 0xc0, 0x95, 0x34, 0x44, 0x4f, 0xff, 0xab, 0x92, 0x86, 0xe8, 0xe9, 0x6c, 0x5a,
	0x7f, 0x61, 0x81, 0xd2, 0xb7, 0x13, 0x14, 0x5f, 0x9e, 0xa0, 0x38, 0x09, 0x20, 0xb2, 0x87, 0xe9,
	0x7f, 0x86, 0xef, 0x2d, 0x82, 0x2a, 0xc4, 0x7f, 0xef, 0xfd, 0x85, 0x7c, 0xe5, 0x83, 0xf0, 0x13,
	0x28, 0xcf, 0xfb, 0x5b, 0x6c, 0xbb, 0xf3, 0x41, 0x5e, 0xf2, 0x2f, 0x7c, 0xaf, 0xfe, 0x2a, 0x21,
	0x82, 0xbe, 0xf5, 0xc2, 0xfa, 0xe3, 0xaa, 0x62, 0x3d, 0xbf, 0xaa, 0x58, 0x7f, 0x5f, 0x55, 0xac,
	0x67, 0xd7, 0x95, 0xa5, 0xe7, 0xd7, 0x95, 0xa5, 0xbf, 0xae, 0x2b, 0x4b, 0x60, 0x17, 0x46, 0xe3,
	0xb9, 0x88, 0xad, 0x02, 0xdb, 0x0a, 0xfb, 0x2e, 0x68, 0x5b, 0xdf, 0x3f, 0x18, 0x04, 0x74, 0x38,
	0xe9, 0xb1, 0xe3, 0xad, 0xc1, 0x88, 0x8c, 0x23, 0x52, 0x8b, 0xd1, 0xc8, 0xbb, 0x44, 0x71, 0x2d,
	0xa9, 0x4f, 0x87, 0x5c, 0xd9, 0x49, 0x6d, 0xde, 0x97, 0xed, 0x3d, 0x0f, 0xe3, 0xc4, 0xfd, 0x79,
	0x79, 0xa5, 0x7d, 0xd8, 0xfc, 0x75, 0xb9, 0xdc, 0x56, 0x84, 0x87, 0x8c, 0xb0, 0x89, 0xb1, 0x73,
	0xea, 0xfe, 0x39, 0x33, 0x9f, 0x31, 0xf3, 0x59, 0x13, 0xe3, 0xb3, 0x53, 0xf7, 0x6a, 0x79, 0x7f,
	0x9e, 0xf9, 0xec, 0xa8, 0xdd, 0x7a, 0x84, 0xa8, 0xe7, 0x7b, 0xd4, 0xfb, 0x67, 0xf9, 0x35, 0xe5,
	0xd2, 0x68, 0x30, 0x9f, 0x46, 0xa3, 0x89, 0x71, 0xa3, 0x71, 0xea, 0xf6, 0xd6, 0xf8, 0x97, 0xcd,
	0x47, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xba, 0xd5, 0x87, 0x15, 0x6f, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// Gets the app parameters.
	AppParameters(ctx context.Context, in *AppParametersRequest, opts ...grpc.CallOption) (*AppParametersResponse, error)
	// Returns the CometBFT transactions that occurred during a given block.
	TransactionsByHeight(ctx context.Context, in *TransactionsByHeightRequest, opts ...grpc.CallOption) (*TransactionsByHeightResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) AppParameters(ctx context.Context, in *AppParametersRequest, opts ...grpc.CallOption) (*AppParametersResponse, error) {
	out := new(AppParametersResponse)
	err := c.cc.Invoke(ctx, "/penumbra.core.app.v1.QueryService/AppParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) TransactionsByHeight(ctx context.Context, in *TransactionsByHeightRequest, opts ...grpc.CallOption) (*TransactionsByHeightResponse, error) {
	out := new(TransactionsByHeightResponse)
	err := c.cc.Invoke(ctx, "/penumbra.core.app.v1.QueryService/TransactionsByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// Gets the app parameters.
	AppParameters(context.Context, *AppParametersRequest) (*AppParametersResponse, error)
	// Returns the CometBFT transactions that occurred during a given block.
	TransactionsByHeight(context.Context, *TransactionsByHeightRequest) (*TransactionsByHeightResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) AppParameters(ctx context.Context, req *AppParametersRequest) (*AppParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppParameters not implemented")
}
func (*UnimplementedQueryServiceServer) TransactionsByHeight(ctx context.Context, req *TransactionsByHeightRequest) (*TransactionsByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionsByHeight not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_AppParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).AppParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.core.app.v1.QueryService/AppParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).AppParameters(ctx, req.(*AppParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_TransactionsByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).TransactionsByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.core.app.v1.QueryService/TransactionsByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).TransactionsByHeight(ctx, req.(*TransactionsByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "penumbra.core.app.v1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppParameters",
			Handler:    _QueryService_AppParameters_Handler,
		},
		{
			MethodName: "TransactionsByHeight",
			Handler:    _QueryService_TransactionsByHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "penumbra/core/app/v1/app.proto",
}

func (m *TransactionsByHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionsByHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionsByHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TransactionsByHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionsByHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionsByHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionParams != nil {
		{
			size, err := m.AuctionParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.DexParams != nil {
		{
			size, err := m.DexParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ShieldedPoolParams != nil {
		{
			size, err := m.ShieldedPoolParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.FundingParams != nil {
		{
			size, err := m.FundingParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.DistributionsParams != nil {
		{
			size, err := m.DistributionsParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.FeeParams != nil {
		{
			size, err := m.FeeParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.StakeParams != nil {
		{
			size, err := m.StakeParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.IbcParams != nil {
		{
			size, err := m.IbcParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.GovernanceParams != nil {
		{
			size, err := m.GovernanceParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CommunityPoolParams != nil {
		{
			size, err := m.CommunityPoolParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SctParams != nil {
		{
			size, err := m.SctParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintApp(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppParametersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppParametersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppParametersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AppParametersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppParametersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppParametersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppParameters != nil {
		{
			size, err := m.AppParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisAppState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisAppState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisAppState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GenesisAppState != nil {
		{
			size := m.GenesisAppState.Size()
			i -= size
			if _, err := m.GenesisAppState.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenesisAppState_GenesisContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisAppState_GenesisContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GenesisContent != nil {
		{
			size, err := m.GenesisContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GenesisAppState_GenesisCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisAppState_GenesisCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GenesisCheckpoint != nil {
		i -= len(m.GenesisCheckpoint)
		copy(dAtA[i:], m.GenesisCheckpoint)
		i = encodeVarintApp(dAtA, i, uint64(len(m.GenesisCheckpoint)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GenesisContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionContent != nil {
		{
			size, err := m.AuctionContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.DexContent != nil {
		{
			size, err := m.DexContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.FundingContent != nil {
		{
			size, err := m.FundingContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.DistributionsContent != nil {
		{
			size, err := m.DistributionsContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.FeeContent != nil {
		{
			size, err := m.FeeContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.CommunityPoolContent != nil {
		{
			size, err := m.CommunityPoolContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.SctContent != nil {
		{
			size, err := m.SctContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.IbcContent != nil {
		{
			size, err := m.IbcContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.GovernanceContent != nil {
		{
			size, err := m.GovernanceContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ShieldedPoolContent != nil {
		{
			size, err := m.ShieldedPoolContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StakeContent != nil {
		{
			size, err := m.StakeContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintApp(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAppParametersChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAppParametersChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAppParametersChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewParameters != nil {
		{
			size, err := m.NewParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApp(dAtA []byte, offset int, v uint64) int {
	offset -= sovApp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransactionsByHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovApp(uint64(m.BlockHeight))
	}
	return n
}

func (m *TransactionsByHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovApp(uint64(l))
		}
	}
	if m.BlockHeight != 0 {
		n += 1 + sovApp(uint64(m.BlockHeight))
	}
	return n
}

func (m *AppParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.SctParams != nil {
		l = m.SctParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.CommunityPoolParams != nil {
		l = m.CommunityPoolParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.GovernanceParams != nil {
		l = m.GovernanceParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.IbcParams != nil {
		l = m.IbcParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.StakeParams != nil {
		l = m.StakeParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.FeeParams != nil {
		l = m.FeeParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.DistributionsParams != nil {
		l = m.DistributionsParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.FundingParams != nil {
		l = m.FundingParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.ShieldedPoolParams != nil {
		l = m.ShieldedPoolParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.DexParams != nil {
		l = m.DexParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.AuctionParams != nil {
		l = m.AuctionParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *AppParametersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AppParametersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppParameters != nil {
		l = m.AppParameters.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *GenesisAppState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GenesisAppState != nil {
		n += m.GenesisAppState.Size()
	}
	return n
}

func (m *GenesisAppState_GenesisContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GenesisContent != nil {
		l = m.GenesisContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}
func (m *GenesisAppState_GenesisCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GenesisCheckpoint != nil {
		l = len(m.GenesisCheckpoint)
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}
func (m *GenesisContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.StakeContent != nil {
		l = m.StakeContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.ShieldedPoolContent != nil {
		l = m.ShieldedPoolContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.GovernanceContent != nil {
		l = m.GovernanceContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.IbcContent != nil {
		l = m.IbcContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.SctContent != nil {
		l = m.SctContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.CommunityPoolContent != nil {
		l = m.CommunityPoolContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.FeeContent != nil {
		l = m.FeeContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.DistributionsContent != nil {
		l = m.DistributionsContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.FundingContent != nil {
		l = m.FundingContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.DexContent != nil {
		l = m.DexContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.AuctionContent != nil {
		l = m.AuctionContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *EventAppParametersChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewParameters != nil {
		l = m.NewParameters.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func sovApp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApp(x uint64) (n int) {
	return sovApp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransactionsByHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionsByHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionsByHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionsByHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionsByHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionsByHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &v1.Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SctParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SctParams == nil {
				m.SctParams = &v11.SctParameters{}
			}
			if err := m.SctParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommunityPoolParams == nil {
				m.CommunityPoolParams = &v12.CommunityPoolParameters{}
			}
			if err := m.CommunityPoolParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovernanceParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GovernanceParams == nil {
				m.GovernanceParams = &v13.GovernanceParameters{}
			}
			if err := m.GovernanceParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IbcParams == nil {
				m.IbcParams = &v14.IbcParameters{}
			}
			if err := m.IbcParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeParams == nil {
				m.StakeParams = &v15.StakeParameters{}
			}
			if err := m.StakeParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeParams == nil {
				m.FeeParams = &v16.FeeParameters{}
			}
			if err := m.FeeParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionsParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionsParams == nil {
				m.DistributionsParams = &v17.DistributionsParameters{}
			}
			if err := m.DistributionsParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FundingParams == nil {
				m.FundingParams = &v18.FundingParameters{}
			}
			if err := m.FundingParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldedPoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShieldedPoolParams == nil {
				m.ShieldedPoolParams = &v19.ShieldedPoolParameters{}
			}
			if err := m.ShieldedPoolParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DexParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DexParams == nil {
				m.DexParams = &v110.DexParameters{}
			}
			if err := m.DexParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuctionParams == nil {
				m.AuctionParams = &v111.AuctionParameters{}
			}
			if err := m.AuctionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppParametersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppParametersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppParametersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppParametersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppParametersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppParametersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppParameters == nil {
				m.AppParameters = &AppParameters{}
			}
			if err := m.AppParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisAppState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisAppState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisAppState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GenesisContent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GenesisAppState = &GenesisAppState_GenesisContent{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisCheckpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.GenesisAppState = &GenesisAppState_GenesisCheckpoint{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeContent == nil {
				m.StakeContent = &v15.GenesisContent{}
			}
			if err := m.StakeContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldedPoolContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShieldedPoolContent == nil {
				m.ShieldedPoolContent = &v19.GenesisContent{}
			}
			if err := m.ShieldedPoolContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovernanceContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GovernanceContent == nil {
				m.GovernanceContent = &v13.GenesisContent{}
			}
			if err := m.GovernanceContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IbcContent == nil {
				m.IbcContent = &v14.GenesisContent{}
			}
			if err := m.IbcContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SctContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SctContent == nil {
				m.SctContent = &v11.GenesisContent{}
			}
			if err := m.SctContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommunityPoolContent == nil {
				m.CommunityPoolContent = &v12.GenesisContent{}
			}
			if err := m.CommunityPoolContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeContent == nil {
				m.FeeContent = &v16.GenesisContent{}
			}
			if err := m.FeeContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionsContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionsContent == nil {
				m.DistributionsContent = &v17.GenesisContent{}
			}
			if err := m.DistributionsContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FundingContent == nil {
				m.FundingContent = &v18.GenesisContent{}
			}
			if err := m.FundingContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DexContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DexContent == nil {
				m.DexContent = &v110.GenesisContent{}
			}
			if err := m.DexContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuctionContent == nil {
				m.AuctionContent = &v111.GenesisContent{}
			}
			if err := m.AuctionContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAppParametersChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAppParametersChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAppParametersChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewParameters == nil {
				m.NewParameters = &AppParameters{}
			}
			if err := m.NewParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApp = fmt.Errorf("proto: unexpected end of group")
)
