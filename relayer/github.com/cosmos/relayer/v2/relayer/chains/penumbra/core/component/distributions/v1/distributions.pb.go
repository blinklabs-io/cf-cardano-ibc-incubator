// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/core/component/distributions/v1/distributions.proto

package distributionsv1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	v1 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/num/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Distribution configuration data.
type DistributionsParameters struct {
	// The amount of staking token issued per block.
	StakingIssuancePerBlock uint64 `protobuf:"varint,1,opt,name=staking_issuance_per_block,json=stakingIssuancePerBlock,proto3" json:"staking_issuance_per_block,omitempty"`
	// The amount of staking token flowing from the community pool to the liquidity tournament each block.
	LiquidityTournamentIncentivePerBlock uint64 `protobuf:"varint,2,opt,name=liquidity_tournament_incentive_per_block,json=liquidityTournamentIncentivePerBlock,proto3" json:"liquidity_tournament_incentive_per_block,omitempty"`
	// If non-zero, no rewards will be distributed at a height >= this height.
	LiquidityTournamentEndBlock uint64 `protobuf:"varint,3,opt,name=liquidity_tournament_end_block,json=liquidityTournamentEndBlock,proto3" json:"liquidity_tournament_end_block,omitempty"`
}

func (m *DistributionsParameters) Reset()         { *m = DistributionsParameters{} }
func (m *DistributionsParameters) String() string { return proto.CompactTextString(m) }
func (*DistributionsParameters) ProtoMessage()    {}
func (*DistributionsParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e86d892e577363a, []int{0}
}
func (m *DistributionsParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionsParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionsParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionsParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionsParameters.Merge(m, src)
}
func (m *DistributionsParameters) XXX_Size() int {
	return m.Size()
}
func (m *DistributionsParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionsParameters.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionsParameters proto.InternalMessageInfo

func (m *DistributionsParameters) GetStakingIssuancePerBlock() uint64 {
	if m != nil {
		return m.StakingIssuancePerBlock
	}
	return 0
}

func (m *DistributionsParameters) GetLiquidityTournamentIncentivePerBlock() uint64 {
	if m != nil {
		return m.LiquidityTournamentIncentivePerBlock
	}
	return 0
}

func (m *DistributionsParameters) GetLiquidityTournamentEndBlock() uint64 {
	if m != nil {
		return m.LiquidityTournamentEndBlock
	}
	return 0
}

// Genesis data for the distributions module.
type GenesisContent struct {
	DistributionsParams *DistributionsParameters `protobuf:"bytes,1,opt,name=distributions_params,json=distributionsParams,proto3" json:"distributions_params,omitempty"`
}

func (m *GenesisContent) Reset()         { *m = GenesisContent{} }
func (m *GenesisContent) String() string { return proto.CompactTextString(m) }
func (*GenesisContent) ProtoMessage()    {}
func (*GenesisContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e86d892e577363a, []int{1}
}
func (m *GenesisContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisContent.Merge(m, src)
}
func (m *GenesisContent) XXX_Size() int {
	return m.Size()
}
func (m *GenesisContent) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisContent.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisContent proto.InternalMessageInfo

func (m *GenesisContent) GetDistributionsParams() *DistributionsParameters {
	if m != nil {
		return m.DistributionsParams
	}
	return nil
}

// Request for retrieving the pool size of the current epoch from the chain state.
type CurrentLqtPoolSizeRequest struct {
}

func (m *CurrentLqtPoolSizeRequest) Reset()         { *m = CurrentLqtPoolSizeRequest{} }
func (m *CurrentLqtPoolSizeRequest) String() string { return proto.CompactTextString(m) }
func (*CurrentLqtPoolSizeRequest) ProtoMessage()    {}
func (*CurrentLqtPoolSizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e86d892e577363a, []int{2}
}
func (m *CurrentLqtPoolSizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentLqtPoolSizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentLqtPoolSizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentLqtPoolSizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentLqtPoolSizeRequest.Merge(m, src)
}
func (m *CurrentLqtPoolSizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *CurrentLqtPoolSizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentLqtPoolSizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentLqtPoolSizeRequest proto.InternalMessageInfo

// Response containing the pool size for the current epoch.
type CurrentLqtPoolSizeResponse struct {
	// The current epoch index.
	EpochIndex uint64 `protobuf:"varint,1,opt,name=epoch_index,json=epochIndex,proto3" json:"epoch_index,omitempty"`
	// The total LQT pool size for the current epoch.
	PoolSize *v1.Amount `protobuf:"bytes,2,opt,name=pool_size,json=poolSize,proto3" json:"pool_size,omitempty"`
}

func (m *CurrentLqtPoolSizeResponse) Reset()         { *m = CurrentLqtPoolSizeResponse{} }
func (m *CurrentLqtPoolSizeResponse) String() string { return proto.CompactTextString(m) }
func (*CurrentLqtPoolSizeResponse) ProtoMessage()    {}
func (*CurrentLqtPoolSizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e86d892e577363a, []int{3}
}
func (m *CurrentLqtPoolSizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentLqtPoolSizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentLqtPoolSizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentLqtPoolSizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentLqtPoolSizeResponse.Merge(m, src)
}
func (m *CurrentLqtPoolSizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *CurrentLqtPoolSizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentLqtPoolSizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentLqtPoolSizeResponse proto.InternalMessageInfo

func (m *CurrentLqtPoolSizeResponse) GetEpochIndex() uint64 {
	if m != nil {
		return m.EpochIndex
	}
	return 0
}

func (m *CurrentLqtPoolSizeResponse) GetPoolSize() *v1.Amount {
	if m != nil {
		return m.PoolSize
	}
	return nil
}

// Request for retrieving the pool size at a specific epoch.
type LqtPoolSizeByEpochRequest struct {
	// The epoch for which we want to retrieve the pool size.
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *LqtPoolSizeByEpochRequest) Reset()         { *m = LqtPoolSizeByEpochRequest{} }
func (m *LqtPoolSizeByEpochRequest) String() string { return proto.CompactTextString(m) }
func (*LqtPoolSizeByEpochRequest) ProtoMessage()    {}
func (*LqtPoolSizeByEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e86d892e577363a, []int{4}
}
func (m *LqtPoolSizeByEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LqtPoolSizeByEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LqtPoolSizeByEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LqtPoolSizeByEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LqtPoolSizeByEpochRequest.Merge(m, src)
}
func (m *LqtPoolSizeByEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *LqtPoolSizeByEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LqtPoolSizeByEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LqtPoolSizeByEpochRequest proto.InternalMessageInfo

func (m *LqtPoolSizeByEpochRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

// Response containing the pool size at a specific epoch.
type LqtPoolSizeByEpochResponse struct {
	// The epoch for which the pool size is returned.
	EpochIndex uint64 `protobuf:"varint,1,opt,name=epoch_index,json=epochIndex,proto3" json:"epoch_index,omitempty"`
	// The total LQT pool size for the given epoch.
	PoolSize *v1.Amount `protobuf:"bytes,2,opt,name=pool_size,json=poolSize,proto3" json:"pool_size,omitempty"`
}

func (m *LqtPoolSizeByEpochResponse) Reset()         { *m = LqtPoolSizeByEpochResponse{} }
func (m *LqtPoolSizeByEpochResponse) String() string { return proto.CompactTextString(m) }
func (*LqtPoolSizeByEpochResponse) ProtoMessage()    {}
func (*LqtPoolSizeByEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e86d892e577363a, []int{5}
}
func (m *LqtPoolSizeByEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LqtPoolSizeByEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LqtPoolSizeByEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LqtPoolSizeByEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LqtPoolSizeByEpochResponse.Merge(m, src)
}
func (m *LqtPoolSizeByEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *LqtPoolSizeByEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LqtPoolSizeByEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LqtPoolSizeByEpochResponse proto.InternalMessageInfo

func (m *LqtPoolSizeByEpochResponse) GetEpochIndex() uint64 {
	if m != nil {
		return m.EpochIndex
	}
	return 0
}

func (m *LqtPoolSizeByEpochResponse) GetPoolSize() *v1.Amount {
	if m != nil {
		return m.PoolSize
	}
	return nil
}

// Event emitted when the size of the LQT pool increases.
type EventLqtPoolSizeIncrease struct {
	// The epoch in which the pool size increase occurred.
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The amount by which the LQT pool size increased in the block.
	Increase *v1.Amount `protobuf:"bytes,2,opt,name=increase,proto3" json:"increase,omitempty"`
	// The new total size of the LQT pool after the increase in the block.
	NewTotal *v1.Amount `protobuf:"bytes,3,opt,name=new_total,json=newTotal,proto3" json:"new_total,omitempty"`
}

func (m *EventLqtPoolSizeIncrease) Reset()         { *m = EventLqtPoolSizeIncrease{} }
func (m *EventLqtPoolSizeIncrease) String() string { return proto.CompactTextString(m) }
func (*EventLqtPoolSizeIncrease) ProtoMessage()    {}
func (*EventLqtPoolSizeIncrease) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e86d892e577363a, []int{6}
}
func (m *EventLqtPoolSizeIncrease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLqtPoolSizeIncrease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLqtPoolSizeIncrease.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLqtPoolSizeIncrease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLqtPoolSizeIncrease.Merge(m, src)
}
func (m *EventLqtPoolSizeIncrease) XXX_Size() int {
	return m.Size()
}
func (m *EventLqtPoolSizeIncrease) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLqtPoolSizeIncrease.DiscardUnknown(m)
}

var xxx_messageInfo_EventLqtPoolSizeIncrease proto.InternalMessageInfo

func (m *EventLqtPoolSizeIncrease) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *EventLqtPoolSizeIncrease) GetIncrease() *v1.Amount {
	if m != nil {
		return m.Increase
	}
	return nil
}

func (m *EventLqtPoolSizeIncrease) GetNewTotal() *v1.Amount {
	if m != nil {
		return m.NewTotal
	}
	return nil
}

func init() {
	proto.RegisterType((*DistributionsParameters)(nil), "penumbra.core.component.distributions.v1.DistributionsParameters")
	proto.RegisterType((*GenesisContent)(nil), "penumbra.core.component.distributions.v1.GenesisContent")
	proto.RegisterType((*CurrentLqtPoolSizeRequest)(nil), "penumbra.core.component.distributions.v1.CurrentLqtPoolSizeRequest")
	proto.RegisterType((*CurrentLqtPoolSizeResponse)(nil), "penumbra.core.component.distributions.v1.CurrentLqtPoolSizeResponse")
	proto.RegisterType((*LqtPoolSizeByEpochRequest)(nil), "penumbra.core.component.distributions.v1.LqtPoolSizeByEpochRequest")
	proto.RegisterType((*LqtPoolSizeByEpochResponse)(nil), "penumbra.core.component.distributions.v1.LqtPoolSizeByEpochResponse")
	proto.RegisterType((*EventLqtPoolSizeIncrease)(nil), "penumbra.core.component.distributions.v1.EventLqtPoolSizeIncrease")
}

func init() {
	proto.RegisterFile("penumbra/core/component/distributions/v1/distributions.proto", fileDescriptor_3e86d892e577363a)
}

var fileDescriptor_3e86d892e577363a = []byte{
	// 657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4f, 0x6b, 0xdb, 0x4e,
	0x10, 0x8d, 0x9c, 0xfc, 0x7e, 0xa4, 0x1b, 0xe8, 0x41, 0x0d, 0x24, 0x71, 0x8a, 0x5a, 0x4c, 0x0f,
	0x3e, 0x04, 0x09, 0xb9, 0x3d, 0xb4, 0x4e, 0x2f, 0xb1, 0x12, 0x82, 0xa1, 0x05, 0xe3, 0x04, 0x1f,
	0x8a, 0x41, 0xac, 0xa5, 0x21, 0x59, 0x62, 0xcd, 0x2a, 0xbb, 0x2b, 0xe5, 0xcf, 0xbd, 0x3d, 0xf7,
	0x1b, 0x14, 0x0a, 0xbd, 0xf4, 0x93, 0x94, 0x9e, 0x72, 0x2c, 0x3d, 0x15, 0xe7, 0xd6, 0x6b, 0xbf,
	0x40, 0x59, 0x45, 0x56, 0xa3, 0xc6, 0xa6, 0x0e, 0x85, 0x5e, 0x8c, 0x3d, 0xfb, 0xde, 0x9b, 0xa7,
	0x99, 0xe7, 0x15, 0x79, 0x1e, 0x03, 0x26, 0xd1, 0x40, 0x50, 0x27, 0xe0, 0x02, 0x9c, 0x80, 0x47,
	0x31, 0x47, 0x40, 0xe5, 0x84, 0x4c, 0x2a, 0xc1, 0x06, 0x89, 0x62, 0x1c, 0xa5, 0x93, 0xba, 0xe5,
	0x82, 0x1d, 0x0b, 0xae, 0xb8, 0x59, 0x1f, 0xb3, 0x6d, 0xcd, 0xb6, 0x0b, 0xb6, 0x5d, 0x06, 0xa7,
	0x6e, 0xd5, 0x2a, 0xf7, 0xc1, 0x24, 0xd2, 0x9a, 0x98, 0x44, 0x57, 0x4a, 0xb5, 0x1f, 0x06, 0x59,
	0xd9, 0xbe, 0x4e, 0xea, 0x50, 0x41, 0x23, 0x50, 0x20, 0xa4, 0xb9, 0x49, 0xaa, 0x52, 0xd1, 0x23,
	0x86, 0x07, 0x3e, 0x93, 0x32, 0xa1, 0x18, 0x80, 0x1f, 0x83, 0xf0, 0x07, 0x43, 0x1e, 0x1c, 0xad,
	0x1a, 0x0f, 0x8d, 0xfa, 0x42, 0x77, 0x25, 0x47, 0xb4, 0x73, 0x40, 0x07, 0x44, 0x4b, 0x1f, 0x9b,
	0x3d, 0x52, 0x1f, 0xb2, 0xe3, 0x84, 0x85, 0x4c, 0x9d, 0xf9, 0x8a, 0x27, 0x02, 0x69, 0x04, 0xa8,
	0x7c, 0x86, 0x01, 0xa0, 0x62, 0xe9, 0x75, 0xa9, 0x4a, 0x26, 0xf5, 0xa8, 0xc0, 0xef, 0x17, 0xf0,
	0xf6, 0x18, 0x5d, 0xe8, 0x7a, 0xc4, 0x9a, 0xa8, 0x0b, 0x18, 0xe6, 0x6a, 0xf3, 0x99, 0xda, 0xfa,
	0x04, 0xb5, 0x1d, 0x0c, 0x33, 0x91, 0xda, 0x1b, 0x83, 0xdc, 0xdd, 0x05, 0x04, 0xc9, 0xa4, 0xc7,
	0x51, 0x01, 0x2a, 0x53, 0x91, 0xe5, 0xd2, 0xf0, 0xfc, 0x58, 0x0f, 0x42, 0x66, 0x8f, 0xb9, 0xd4,
	0xd8, 0xb2, 0x67, 0x9d, 0xb8, 0x3d, 0x65, 0x9a, 0xdd, 0x7b, 0xe1, 0x8d, 0x03, 0x59, 0x5b, 0x27,
	0x6b, 0x5e, 0x22, 0x04, 0xa0, 0x7a, 0x71, 0xac, 0x3a, 0x9c, 0x0f, 0xf7, 0xd8, 0x39, 0x74, 0xe1,
	0x38, 0x01, 0xa9, 0x6a, 0xa7, 0xa4, 0x3a, 0xe9, 0x50, 0xc6, 0x1c, 0x25, 0x98, 0x0f, 0xc8, 0x12,
	0xc4, 0x3c, 0x38, 0xf4, 0x19, 0x86, 0x70, 0x9a, 0xaf, 0x83, 0x64, 0xa5, 0xb6, 0xae, 0x98, 0xcf,
	0xc8, 0x9d, 0x98, 0xf3, 0xa1, 0x2f, 0xd9, 0x39, 0x64, 0x23, 0x5e, 0x6a, 0xdc, 0xff, 0xed, 0x31,
	0x74, 0x0e, 0x52, 0xd7, 0xde, 0x8a, 0x78, 0x82, 0xaa, 0xbb, 0x18, 0xe7, 0x3d, 0x6a, 0x2e, 0x59,
	0xbb, 0xd6, 0xb2, 0x75, 0xb6, 0xa3, 0x55, 0x73, 0x5b, 0xe6, 0x32, 0xf9, 0x2f, 0xeb, 0x92, 0xb7,
	0xbc, 0xfa, 0xa1, 0xcd, 0x4e, 0xa2, 0xfc, 0x03, 0xb3, 0x1f, 0x0c, 0xb2, 0xba, 0x93, 0x96, 0xa7,
	0xd4, 0xc6, 0x40, 0x00, 0x95, 0x30, 0xd9, 0xac, 0xf9, 0x94, 0x2c, 0xb2, 0x1c, 0x31, 0x5b, 0xb3,
	0x31, 0x5a, 0xfb, 0x44, 0x38, 0xf1, 0x15, 0x57, 0x74, 0x98, 0x25, 0xed, 0x8f, 0x54, 0x84, 0x93,
	0x7d, 0x8d, 0x6e, 0x7c, 0xad, 0x90, 0xe5, 0x52, 0x38, 0xf6, 0x40, 0xa4, 0x2c, 0x00, 0xf3, 0x9d,
	0x41, 0xcc, 0x9b, 0x8b, 0x36, 0xbd, 0xd9, 0x33, 0x37, 0x35, 0x43, 0xd5, 0xed, 0xbf, 0x13, 0xc9,
	0xd7, 0xa7, 0x1d, 0xde, 0xdc, 0xee, 0x6d, 0x1c, 0x4e, 0x8d, 0xd3, 0x6d, 0x1c, 0x4e, 0x0f, 0x58,
	0xeb, 0xf5, 0xfc, 0xa7, 0x91, 0x65, 0x5c, 0x8c, 0x2c, 0xe3, 0xdb, 0xc8, 0x32, 0xde, 0x5e, 0x5a,
	0x73, 0x17, 0x97, 0xd6, 0xdc, 0x97, 0x4b, 0x6b, 0x8e, 0x6c, 0x04, 0x3c, 0x9a, 0xb9, 0x47, 0xcb,
	0x2c, 0xff, 0x7f, 0xf5, 0x25, 0xd9, 0x31, 0x5e, 0x85, 0x07, 0x4c, 0x1d, 0x26, 0x03, 0x4d, 0x74,
	0x02, 0x2e, 0x23, 0x2e, 0x1d, 0x01, 0x43, 0x7a, 0x06, 0xc2, 0x49, 0x1b, 0xc5, 0xd7, 0xe0, 0x90,
	0x32, 0x94, 0xce, 0xac, 0x57, 0xfb, 0x66, 0xa9, 0x90, 0xba, 0xef, 0x2b, 0x0b, 0x1d, 0xcf, 0xdb,
	0xfe, 0x58, 0xa9, 0x77, 0xc6, 0x6e, 0x3d, 0xed, 0xd6, 0x2b, 0xdc, 0x96, 0xbc, 0xd9, 0x3d, 0xf7,
	0xf3, 0x2f, 0x68, 0x5f, 0x43, 0xfb, 0x05, 0xb4, 0x5f, 0x82, 0xf6, 0x7b, 0xee, 0xa8, 0xf2, 0x64,
	0x56, 0x68, 0x7f, 0xb7, 0xd3, 0x7a, 0x09, 0x8a, 0x86, 0x54, 0xd1, 0xef, 0x95, 0x8d, 0x31, 0xad,
	0xd9, 0xd4, 0x3c, 0xfd, 0x99, 0x13, 0x9b, 0xcd, 0x12, 0xb3, 0xd9, 0xec, 0xb9, 0x83, 0xff, 0xb3,
	0xd7, 0xca, 0xe3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xdd, 0xa9, 0xb6, 0xe0, 0x06, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DistributionsServiceClient is the client API for DistributionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DistributionsServiceClient interface {
	CurrentLqtPoolSize(ctx context.Context, in *CurrentLqtPoolSizeRequest, opts ...grpc.CallOption) (*CurrentLqtPoolSizeResponse, error)
	LqtPoolSizeByEpoch(ctx context.Context, in *LqtPoolSizeByEpochRequest, opts ...grpc.CallOption) (*LqtPoolSizeByEpochResponse, error)
}

type distributionsServiceClient struct {
	cc grpc1.ClientConn
}

func NewDistributionsServiceClient(cc grpc1.ClientConn) DistributionsServiceClient {
	return &distributionsServiceClient{cc}
}

func (c *distributionsServiceClient) CurrentLqtPoolSize(ctx context.Context, in *CurrentLqtPoolSizeRequest, opts ...grpc.CallOption) (*CurrentLqtPoolSizeResponse, error) {
	out := new(CurrentLqtPoolSizeResponse)
	err := c.cc.Invoke(ctx, "/penumbra.core.component.distributions.v1.DistributionsService/CurrentLqtPoolSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionsServiceClient) LqtPoolSizeByEpoch(ctx context.Context, in *LqtPoolSizeByEpochRequest, opts ...grpc.CallOption) (*LqtPoolSizeByEpochResponse, error) {
	out := new(LqtPoolSizeByEpochResponse)
	err := c.cc.Invoke(ctx, "/penumbra.core.component.distributions.v1.DistributionsService/LqtPoolSizeByEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributionsServiceServer is the server API for DistributionsService service.
type DistributionsServiceServer interface {
	CurrentLqtPoolSize(context.Context, *CurrentLqtPoolSizeRequest) (*CurrentLqtPoolSizeResponse, error)
	LqtPoolSizeByEpoch(context.Context, *LqtPoolSizeByEpochRequest) (*LqtPoolSizeByEpochResponse, error)
}

// UnimplementedDistributionsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDistributionsServiceServer struct {
}

func (*UnimplementedDistributionsServiceServer) CurrentLqtPoolSize(ctx context.Context, req *CurrentLqtPoolSizeRequest) (*CurrentLqtPoolSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentLqtPoolSize not implemented")
}
func (*UnimplementedDistributionsServiceServer) LqtPoolSizeByEpoch(ctx context.Context, req *LqtPoolSizeByEpochRequest) (*LqtPoolSizeByEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LqtPoolSizeByEpoch not implemented")
}

func RegisterDistributionsServiceServer(s grpc1.Server, srv DistributionsServiceServer) {
	s.RegisterService(&_DistributionsService_serviceDesc, srv)
}

func _DistributionsService_CurrentLqtPoolSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentLqtPoolSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionsServiceServer).CurrentLqtPoolSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.core.component.distributions.v1.DistributionsService/CurrentLqtPoolSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionsServiceServer).CurrentLqtPoolSize(ctx, req.(*CurrentLqtPoolSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionsService_LqtPoolSizeByEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LqtPoolSizeByEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionsServiceServer).LqtPoolSizeByEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.core.component.distributions.v1.DistributionsService/LqtPoolSizeByEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionsServiceServer).LqtPoolSizeByEpoch(ctx, req.(*LqtPoolSizeByEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DistributionsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "penumbra.core.component.distributions.v1.DistributionsService",
	HandlerType: (*DistributionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurrentLqtPoolSize",
			Handler:    _DistributionsService_CurrentLqtPoolSize_Handler,
		},
		{
			MethodName: "LqtPoolSizeByEpoch",
			Handler:    _DistributionsService_LqtPoolSizeByEpoch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "penumbra/core/component/distributions/v1/distributions.proto",
}

func (m *DistributionsParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionsParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionsParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LiquidityTournamentEndBlock != 0 {
		i = encodeVarintDistributions(dAtA, i, uint64(m.LiquidityTournamentEndBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.LiquidityTournamentIncentivePerBlock != 0 {
		i = encodeVarintDistributions(dAtA, i, uint64(m.LiquidityTournamentIncentivePerBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.StakingIssuancePerBlock != 0 {
		i = encodeVarintDistributions(dAtA, i, uint64(m.StakingIssuancePerBlock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DistributionsParams != nil {
		{
			size, err := m.DistributionsParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDistributions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CurrentLqtPoolSizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentLqtPoolSizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentLqtPoolSizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CurrentLqtPoolSizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentLqtPoolSizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentLqtPoolSizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolSize != nil {
		{
			size, err := m.PoolSize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDistributions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EpochIndex != 0 {
		i = encodeVarintDistributions(dAtA, i, uint64(m.EpochIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LqtPoolSizeByEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LqtPoolSizeByEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LqtPoolSizeByEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintDistributions(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LqtPoolSizeByEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LqtPoolSizeByEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LqtPoolSizeByEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolSize != nil {
		{
			size, err := m.PoolSize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDistributions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EpochIndex != 0 {
		i = encodeVarintDistributions(dAtA, i, uint64(m.EpochIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventLqtPoolSizeIncrease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLqtPoolSizeIncrease) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventLqtPoolSizeIncrease) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewTotal != nil {
		{
			size, err := m.NewTotal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDistributions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Increase != nil {
		{
			size, err := m.Increase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDistributions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintDistributions(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDistributions(dAtA []byte, offset int, v uint64) int {
	offset -= sovDistributions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DistributionsParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingIssuancePerBlock != 0 {
		n += 1 + sovDistributions(uint64(m.StakingIssuancePerBlock))
	}
	if m.LiquidityTournamentIncentivePerBlock != 0 {
		n += 1 + sovDistributions(uint64(m.LiquidityTournamentIncentivePerBlock))
	}
	if m.LiquidityTournamentEndBlock != 0 {
		n += 1 + sovDistributions(uint64(m.LiquidityTournamentEndBlock))
	}
	return n
}

func (m *GenesisContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionsParams != nil {
		l = m.DistributionsParams.Size()
		n += 1 + l + sovDistributions(uint64(l))
	}
	return n
}

func (m *CurrentLqtPoolSizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CurrentLqtPoolSizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochIndex != 0 {
		n += 1 + sovDistributions(uint64(m.EpochIndex))
	}
	if m.PoolSize != nil {
		l = m.PoolSize.Size()
		n += 1 + l + sovDistributions(uint64(l))
	}
	return n
}

func (m *LqtPoolSizeByEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovDistributions(uint64(m.Epoch))
	}
	return n
}

func (m *LqtPoolSizeByEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochIndex != 0 {
		n += 1 + sovDistributions(uint64(m.EpochIndex))
	}
	if m.PoolSize != nil {
		l = m.PoolSize.Size()
		n += 1 + l + sovDistributions(uint64(l))
	}
	return n
}

func (m *EventLqtPoolSizeIncrease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovDistributions(uint64(m.Epoch))
	}
	if m.Increase != nil {
		l = m.Increase.Size()
		n += 1 + l + sovDistributions(uint64(l))
	}
	if m.NewTotal != nil {
		l = m.NewTotal.Size()
		n += 1 + l + sovDistributions(uint64(l))
	}
	return n
}

func sovDistributions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDistributions(x uint64) (n int) {
	return sovDistributions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DistributionsParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionsParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionsParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingIssuancePerBlock", wireType)
			}
			m.StakingIssuancePerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakingIssuancePerBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityTournamentIncentivePerBlock", wireType)
			}
			m.LiquidityTournamentIncentivePerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidityTournamentIncentivePerBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityTournamentEndBlock", wireType)
			}
			m.LiquidityTournamentEndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidityTournamentEndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDistributions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistributions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionsParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionsParams == nil {
				m.DistributionsParams = &DistributionsParameters{}
			}
			if err := m.DistributionsParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDistributions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistributions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentLqtPoolSizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentLqtPoolSizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentLqtPoolSizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDistributions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistributions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentLqtPoolSizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentLqtPoolSizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentLqtPoolSizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIndex", wireType)
			}
			m.EpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolSize == nil {
				m.PoolSize = &v1.Amount{}
			}
			if err := m.PoolSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDistributions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistributions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LqtPoolSizeByEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LqtPoolSizeByEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LqtPoolSizeByEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDistributions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistributions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LqtPoolSizeByEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LqtPoolSizeByEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LqtPoolSizeByEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIndex", wireType)
			}
			m.EpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolSize == nil {
				m.PoolSize = &v1.Amount{}
			}
			if err := m.PoolSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDistributions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistributions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventLqtPoolSizeIncrease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLqtPoolSizeIncrease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLqtPoolSizeIncrease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Increase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Increase == nil {
				m.Increase = &v1.Amount{}
			}
			if err := m.Increase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTotal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewTotal == nil {
				m.NewTotal = &v1.Amount{}
			}
			if err := m.NewTotal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDistributions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistributions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDistributions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDistributions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDistributions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDistributions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDistributions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDistributions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDistributions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDistributions = fmt.Errorf("proto: unexpected end of group")
)
