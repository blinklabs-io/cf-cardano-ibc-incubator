// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/core/component/sct/v1/sct.proto

package sctv1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v8/modules/core/23-commitment/types"
	v1 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/txhash/v1"
	v11 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/crypto/tct/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Configuration data for the SCT component.
type SctParameters struct {
	// The default duration of each epoch, in number of blocks.
	EpochDuration uint64 `protobuf:"varint,1,opt,name=epoch_duration,json=epochDuration,proto3" json:"epoch_duration,omitempty"`
}

func (m *SctParameters) Reset()         { *m = SctParameters{} }
func (m *SctParameters) String() string { return proto.CompactTextString(m) }
func (*SctParameters) ProtoMessage()    {}
func (*SctParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{0}
}
func (m *SctParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SctParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SctParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SctParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SctParameters.Merge(m, src)
}
func (m *SctParameters) XXX_Size() int {
	return m.Size()
}
func (m *SctParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_SctParameters.DiscardUnknown(m)
}

var xxx_messageInfo_SctParameters proto.InternalMessageInfo

func (m *SctParameters) GetEpochDuration() uint64 {
	if m != nil {
		return m.EpochDuration
	}
	return 0
}

// Sct-specific genesis content.
type GenesisContent struct {
	// The SctParameters present at genesis.
	SctParams *SctParameters `protobuf:"bytes,1,opt,name=sct_params,json=sctParams,proto3" json:"sct_params,omitempty"`
}

func (m *GenesisContent) Reset()         { *m = GenesisContent{} }
func (m *GenesisContent) String() string { return proto.CompactTextString(m) }
func (*GenesisContent) ProtoMessage()    {}
func (*GenesisContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{1}
}
func (m *GenesisContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisContent.Merge(m, src)
}
func (m *GenesisContent) XXX_Size() int {
	return m.Size()
}
func (m *GenesisContent) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisContent.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisContent proto.InternalMessageInfo

func (m *GenesisContent) GetSctParams() *SctParameters {
	if m != nil {
		return m.SctParams
	}
	return nil
}

// An epoch is a sequentially numbered collection of contiguous blocks.
type Epoch struct {
	// The unique index of the epoch.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The starting height for the epoch.
	StartHeight uint64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
}

func (m *Epoch) Reset()         { *m = Epoch{} }
func (m *Epoch) String() string { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()    {}
func (*Epoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{2}
}
func (m *Epoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Epoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Epoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Epoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epoch.Merge(m, src)
}
func (m *Epoch) XXX_Size() int {
	return m.Size()
}
func (m *Epoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Epoch.DiscardUnknown(m)
}

var xxx_messageInfo_Epoch proto.InternalMessageInfo

func (m *Epoch) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Epoch) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

// Metadata describing the source of a commitment in the state commitment tree.
//
// This message allows clients to track provenance of state commitments, and to
// decide whether or not to download block data.
type CommitmentSource struct {
	// Types that are valid to be assigned to Source:
	//	*CommitmentSource_Transaction_
	//	*CommitmentSource_Ics_20Transfer
	//	*CommitmentSource_FundingStreamReward_
	//	*CommitmentSource_CommunityPoolOutput_
	//	*CommitmentSource_Genesis_
	//	*CommitmentSource_Lqt
	Source isCommitmentSource_Source `protobuf_oneof:"source"`
}

func (m *CommitmentSource) Reset()         { *m = CommitmentSource{} }
func (m *CommitmentSource) String() string { return proto.CompactTextString(m) }
func (*CommitmentSource) ProtoMessage()    {}
func (*CommitmentSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{3}
}
func (m *CommitmentSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitmentSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitmentSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitmentSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitmentSource.Merge(m, src)
}
func (m *CommitmentSource) XXX_Size() int {
	return m.Size()
}
func (m *CommitmentSource) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitmentSource.DiscardUnknown(m)
}

var xxx_messageInfo_CommitmentSource proto.InternalMessageInfo

type isCommitmentSource_Source interface {
	isCommitmentSource_Source()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CommitmentSource_Transaction_ struct {
	Transaction *CommitmentSource_Transaction `protobuf:"bytes,1,opt,name=transaction,proto3,oneof" json:"transaction,omitempty"`
}
type CommitmentSource_Ics_20Transfer struct {
	Ics_20Transfer *CommitmentSource_Ics20Transfer `protobuf:"bytes,2,opt,name=ics_20_transfer,json=ics20Transfer,proto3,oneof" json:"ics_20_transfer,omitempty"`
}
type CommitmentSource_FundingStreamReward_ struct {
	FundingStreamReward *CommitmentSource_FundingStreamReward `protobuf:"bytes,20,opt,name=funding_stream_reward,json=fundingStreamReward,proto3,oneof" json:"funding_stream_reward,omitempty"`
}
type CommitmentSource_CommunityPoolOutput_ struct {
	CommunityPoolOutput *CommitmentSource_CommunityPoolOutput `protobuf:"bytes,30,opt,name=community_pool_output,json=communityPoolOutput,proto3,oneof" json:"community_pool_output,omitempty"`
}
type CommitmentSource_Genesis_ struct {
	Genesis *CommitmentSource_Genesis `protobuf:"bytes,40,opt,name=genesis,proto3,oneof" json:"genesis,omitempty"`
}
type CommitmentSource_Lqt struct {
	Lqt *CommitmentSource_LiquidityTournamentReward `protobuf:"bytes,50,opt,name=lqt,proto3,oneof" json:"lqt,omitempty"`
}

func (*CommitmentSource_Transaction_) isCommitmentSource_Source()         {}
func (*CommitmentSource_Ics_20Transfer) isCommitmentSource_Source()       {}
func (*CommitmentSource_FundingStreamReward_) isCommitmentSource_Source() {}
func (*CommitmentSource_CommunityPoolOutput_) isCommitmentSource_Source() {}
func (*CommitmentSource_Genesis_) isCommitmentSource_Source()             {}
func (*CommitmentSource_Lqt) isCommitmentSource_Source()                  {}

func (m *CommitmentSource) GetSource() isCommitmentSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *CommitmentSource) GetTransaction() *CommitmentSource_Transaction {
	if x, ok := m.GetSource().(*CommitmentSource_Transaction_); ok {
		return x.Transaction
	}
	return nil
}

func (m *CommitmentSource) GetIcs_20Transfer() *CommitmentSource_Ics20Transfer {
	if x, ok := m.GetSource().(*CommitmentSource_Ics_20Transfer); ok {
		return x.Ics_20Transfer
	}
	return nil
}

func (m *CommitmentSource) GetFundingStreamReward() *CommitmentSource_FundingStreamReward {
	if x, ok := m.GetSource().(*CommitmentSource_FundingStreamReward_); ok {
		return x.FundingStreamReward
	}
	return nil
}

func (m *CommitmentSource) GetCommunityPoolOutput() *CommitmentSource_CommunityPoolOutput {
	if x, ok := m.GetSource().(*CommitmentSource_CommunityPoolOutput_); ok {
		return x.CommunityPoolOutput
	}
	return nil
}

func (m *CommitmentSource) GetGenesis() *CommitmentSource_Genesis {
	if x, ok := m.GetSource().(*CommitmentSource_Genesis_); ok {
		return x.Genesis
	}
	return nil
}

func (m *CommitmentSource) GetLqt() *CommitmentSource_LiquidityTournamentReward {
	if x, ok := m.GetSource().(*CommitmentSource_Lqt); ok {
		return x.Lqt
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CommitmentSource) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CommitmentSource_Transaction_)(nil),
		(*CommitmentSource_Ics_20Transfer)(nil),
		(*CommitmentSource_FundingStreamReward_)(nil),
		(*CommitmentSource_CommunityPoolOutput_)(nil),
		(*CommitmentSource_Genesis_)(nil),
		(*CommitmentSource_Lqt)(nil),
	}
}

// The state commitment was included in the genesis state.
type CommitmentSource_Genesis struct {
}

func (m *CommitmentSource_Genesis) Reset()         { *m = CommitmentSource_Genesis{} }
func (m *CommitmentSource_Genesis) String() string { return proto.CompactTextString(m) }
func (*CommitmentSource_Genesis) ProtoMessage()    {}
func (*CommitmentSource_Genesis) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{3, 0}
}
func (m *CommitmentSource_Genesis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitmentSource_Genesis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitmentSource_Genesis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitmentSource_Genesis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitmentSource_Genesis.Merge(m, src)
}
func (m *CommitmentSource_Genesis) XXX_Size() int {
	return m.Size()
}
func (m *CommitmentSource_Genesis) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitmentSource_Genesis.DiscardUnknown(m)
}

var xxx_messageInfo_CommitmentSource_Genesis proto.InternalMessageInfo

// The commitment was created by a transaction.
//
// When included in a `CompactBlock` via a `StatePayload`, the transaction source is "dehydrated"
// by stripping the `id` field and putting empty bytes in its place.  When clients perform extended
// transaction fetch, they should match up transaction hashes to "rehydrate" the source info.
type CommitmentSource_Transaction struct {
	// The transaction ID, if specified.
	//
	// This field may be omitted to save space, and should not be required to be present.
	// If the bytes are missing, the message should be interpreted as "Transaction (Unknown)".
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CommitmentSource_Transaction) Reset()         { *m = CommitmentSource_Transaction{} }
func (m *CommitmentSource_Transaction) String() string { return proto.CompactTextString(m) }
func (*CommitmentSource_Transaction) ProtoMessage()    {}
func (*CommitmentSource_Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{3, 1}
}
func (m *CommitmentSource_Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitmentSource_Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitmentSource_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitmentSource_Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitmentSource_Transaction.Merge(m, src)
}
func (m *CommitmentSource_Transaction) XXX_Size() int {
	return m.Size()
}
func (m *CommitmentSource_Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitmentSource_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_CommitmentSource_Transaction proto.InternalMessageInfo

func (m *CommitmentSource_Transaction) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// The commitment was created through a validator's funding stream.
type CommitmentSource_FundingStreamReward struct {
	// The epoch index the rewards were issued in.
	EpochIndex uint64 `protobuf:"varint,1,opt,name=epoch_index,json=epochIndex,proto3" json:"epoch_index,omitempty"`
}

func (m *CommitmentSource_FundingStreamReward) Reset()         { *m = CommitmentSource_FundingStreamReward{} }
func (m *CommitmentSource_FundingStreamReward) String() string { return proto.CompactTextString(m) }
func (*CommitmentSource_FundingStreamReward) ProtoMessage()    {}
func (*CommitmentSource_FundingStreamReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{3, 2}
}
func (m *CommitmentSource_FundingStreamReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitmentSource_FundingStreamReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitmentSource_FundingStreamReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitmentSource_FundingStreamReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitmentSource_FundingStreamReward.Merge(m, src)
}
func (m *CommitmentSource_FundingStreamReward) XXX_Size() int {
	return m.Size()
}
func (m *CommitmentSource_FundingStreamReward) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitmentSource_FundingStreamReward.DiscardUnknown(m)
}

var xxx_messageInfo_CommitmentSource_FundingStreamReward proto.InternalMessageInfo

func (m *CommitmentSource_FundingStreamReward) GetEpochIndex() uint64 {
	if m != nil {
		return m.EpochIndex
	}
	return 0
}

// The commitment was created through a `CommunityPoolOutput` in a governance-initated transaction.
type CommitmentSource_CommunityPoolOutput struct {
}

func (m *CommitmentSource_CommunityPoolOutput) Reset()         { *m = CommitmentSource_CommunityPoolOutput{} }
func (m *CommitmentSource_CommunityPoolOutput) String() string { return proto.CompactTextString(m) }
func (*CommitmentSource_CommunityPoolOutput) ProtoMessage()    {}
func (*CommitmentSource_CommunityPoolOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{3, 3}
}
func (m *CommitmentSource_CommunityPoolOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitmentSource_CommunityPoolOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitmentSource_CommunityPoolOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitmentSource_CommunityPoolOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitmentSource_CommunityPoolOutput.Merge(m, src)
}
func (m *CommitmentSource_CommunityPoolOutput) XXX_Size() int {
	return m.Size()
}
func (m *CommitmentSource_CommunityPoolOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitmentSource_CommunityPoolOutput.DiscardUnknown(m)
}

var xxx_messageInfo_CommitmentSource_CommunityPoolOutput proto.InternalMessageInfo

// The commitment was created by an inbound ICS20 transfer.
type CommitmentSource_Ics20Transfer struct {
	// The sequence number of the packet that triggered the transfer
	PacketSeq uint64 `protobuf:"varint,1,opt,name=packet_seq,json=packetSeq,proto3" json:"packet_seq,omitempty"`
	// The channel id the transfer happened on
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The sender address on the counterparty chain
	Sender string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *CommitmentSource_Ics20Transfer) Reset()         { *m = CommitmentSource_Ics20Transfer{} }
func (m *CommitmentSource_Ics20Transfer) String() string { return proto.CompactTextString(m) }
func (*CommitmentSource_Ics20Transfer) ProtoMessage()    {}
func (*CommitmentSource_Ics20Transfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{3, 4}
}
func (m *CommitmentSource_Ics20Transfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitmentSource_Ics20Transfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitmentSource_Ics20Transfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitmentSource_Ics20Transfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitmentSource_Ics20Transfer.Merge(m, src)
}
func (m *CommitmentSource_Ics20Transfer) XXX_Size() int {
	return m.Size()
}
func (m *CommitmentSource_Ics20Transfer) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitmentSource_Ics20Transfer.DiscardUnknown(m)
}

var xxx_messageInfo_CommitmentSource_Ics20Transfer proto.InternalMessageInfo

func (m *CommitmentSource_Ics20Transfer) GetPacketSeq() uint64 {
	if m != nil {
		return m.PacketSeq
	}
	return 0
}

func (m *CommitmentSource_Ics20Transfer) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *CommitmentSource_Ics20Transfer) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// The commitment was created by the LQT mechanism and tracks LQT reward notes.
type CommitmentSource_LiquidityTournamentReward struct {
	// The epoch in which the reward occured.
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Transaction hash of the transaction that did the voting.
	TxHash *v1.TransactionId `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *CommitmentSource_LiquidityTournamentReward) Reset() {
	*m = CommitmentSource_LiquidityTournamentReward{}
}
func (m *CommitmentSource_LiquidityTournamentReward) String() string {
	return proto.CompactTextString(m)
}
func (*CommitmentSource_LiquidityTournamentReward) ProtoMessage() {}
func (*CommitmentSource_LiquidityTournamentReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{3, 5}
}
func (m *CommitmentSource_LiquidityTournamentReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitmentSource_LiquidityTournamentReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitmentSource_LiquidityTournamentReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitmentSource_LiquidityTournamentReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitmentSource_LiquidityTournamentReward.Merge(m, src)
}
func (m *CommitmentSource_LiquidityTournamentReward) XXX_Size() int {
	return m.Size()
}
func (m *CommitmentSource_LiquidityTournamentReward) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitmentSource_LiquidityTournamentReward.DiscardUnknown(m)
}

var xxx_messageInfo_CommitmentSource_LiquidityTournamentReward proto.InternalMessageInfo

func (m *CommitmentSource_LiquidityTournamentReward) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *CommitmentSource_LiquidityTournamentReward) GetTxHash() *v1.TransactionId {
	if m != nil {
		return m.TxHash
	}
	return nil
}

type Nullifier struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *Nullifier) Reset()         { *m = Nullifier{} }
func (m *Nullifier) String() string { return proto.CompactTextString(m) }
func (*Nullifier) ProtoMessage()    {}
func (*Nullifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{4}
}
func (m *Nullifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Nullifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Nullifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Nullifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nullifier.Merge(m, src)
}
func (m *Nullifier) XXX_Size() int {
	return m.Size()
}
func (m *Nullifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Nullifier.DiscardUnknown(m)
}

var xxx_messageInfo_Nullifier proto.InternalMessageInfo

func (m *Nullifier) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

// Records information about what transaction spent a nullifier.
type NullificationInfo struct {
	Id          []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SpendHeight uint64 `protobuf:"varint,2,opt,name=spend_height,json=spendHeight,proto3" json:"spend_height,omitempty"`
}

func (m *NullificationInfo) Reset()         { *m = NullificationInfo{} }
func (m *NullificationInfo) String() string { return proto.CompactTextString(m) }
func (*NullificationInfo) ProtoMessage()    {}
func (*NullificationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{5}
}
func (m *NullificationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullificationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullificationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullificationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullificationInfo.Merge(m, src)
}
func (m *NullificationInfo) XXX_Size() int {
	return m.Size()
}
func (m *NullificationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NullificationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NullificationInfo proto.InternalMessageInfo

func (m *NullificationInfo) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NullificationInfo) GetSpendHeight() uint64 {
	if m != nil {
		return m.SpendHeight
	}
	return 0
}

// Event recording a new commitment added to the SCT.
type EventCommitment struct {
	Commitment *v11.StateCommitment `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	Position   uint64               `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	Source     *CommitmentSource    `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *EventCommitment) Reset()         { *m = EventCommitment{} }
func (m *EventCommitment) String() string { return proto.CompactTextString(m) }
func (*EventCommitment) ProtoMessage()    {}
func (*EventCommitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{6}
}
func (m *EventCommitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCommitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCommitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCommitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCommitment.Merge(m, src)
}
func (m *EventCommitment) XXX_Size() int {
	return m.Size()
}
func (m *EventCommitment) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCommitment.DiscardUnknown(m)
}

var xxx_messageInfo_EventCommitment proto.InternalMessageInfo

func (m *EventCommitment) GetCommitment() *v11.StateCommitment {
	if m != nil {
		return m.Commitment
	}
	return nil
}

func (m *EventCommitment) GetPosition() uint64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *EventCommitment) GetSource() *CommitmentSource {
	if m != nil {
		return m.Source
	}
	return nil
}

// Event recording an SCT anchor (global root).
type EventAnchor struct {
	Anchor    *v11.MerkleRoot        `protobuf:"bytes,1,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Height    uint64                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *EventAnchor) Reset()         { *m = EventAnchor{} }
func (m *EventAnchor) String() string { return proto.CompactTextString(m) }
func (*EventAnchor) ProtoMessage()    {}
func (*EventAnchor) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{7}
}
func (m *EventAnchor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAnchor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAnchor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAnchor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAnchor.Merge(m, src)
}
func (m *EventAnchor) XXX_Size() int {
	return m.Size()
}
func (m *EventAnchor) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAnchor.DiscardUnknown(m)
}

var xxx_messageInfo_EventAnchor proto.InternalMessageInfo

func (m *EventAnchor) GetAnchor() *v11.MerkleRoot {
	if m != nil {
		return m.Anchor
	}
	return nil
}

func (m *EventAnchor) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *EventAnchor) GetTimestamp() *timestamppb.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// Event recording an SCT epoch root.
type EventEpochRoot struct {
	Root      *v11.MerkleRoot        `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Index     uint64                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *EventEpochRoot) Reset()         { *m = EventEpochRoot{} }
func (m *EventEpochRoot) String() string { return proto.CompactTextString(m) }
func (*EventEpochRoot) ProtoMessage()    {}
func (*EventEpochRoot) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{8}
}
func (m *EventEpochRoot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventEpochRoot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventEpochRoot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventEpochRoot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventEpochRoot.Merge(m, src)
}
func (m *EventEpochRoot) XXX_Size() int {
	return m.Size()
}
func (m *EventEpochRoot) XXX_DiscardUnknown() {
	xxx_messageInfo_EventEpochRoot.DiscardUnknown(m)
}

var xxx_messageInfo_EventEpochRoot proto.InternalMessageInfo

func (m *EventEpochRoot) GetRoot() *v11.MerkleRoot {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *EventEpochRoot) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *EventEpochRoot) GetTimestamp() *timestamppb.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// Event recording an SCT block root.
type EventBlockRoot struct {
	Root      *v11.MerkleRoot        `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Height    uint64                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *EventBlockRoot) Reset()         { *m = EventBlockRoot{} }
func (m *EventBlockRoot) String() string { return proto.CompactTextString(m) }
func (*EventBlockRoot) ProtoMessage()    {}
func (*EventBlockRoot) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{9}
}
func (m *EventBlockRoot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBlockRoot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBlockRoot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBlockRoot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBlockRoot.Merge(m, src)
}
func (m *EventBlockRoot) XXX_Size() int {
	return m.Size()
}
func (m *EventBlockRoot) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBlockRoot.DiscardUnknown(m)
}

var xxx_messageInfo_EventBlockRoot proto.InternalMessageInfo

func (m *EventBlockRoot) GetRoot() *v11.MerkleRoot {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *EventBlockRoot) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *EventBlockRoot) GetTimestamp() *timestamppb.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type EpochByHeightRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *EpochByHeightRequest) Reset()         { *m = EpochByHeightRequest{} }
func (m *EpochByHeightRequest) String() string { return proto.CompactTextString(m) }
func (*EpochByHeightRequest) ProtoMessage()    {}
func (*EpochByHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{10}
}
func (m *EpochByHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochByHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochByHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochByHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochByHeightRequest.Merge(m, src)
}
func (m *EpochByHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *EpochByHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochByHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EpochByHeightRequest proto.InternalMessageInfo

func (m *EpochByHeightRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type EpochByHeightResponse struct {
	Epoch *Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *EpochByHeightResponse) Reset()         { *m = EpochByHeightResponse{} }
func (m *EpochByHeightResponse) String() string { return proto.CompactTextString(m) }
func (*EpochByHeightResponse) ProtoMessage()    {}
func (*EpochByHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{11}
}
func (m *EpochByHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochByHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochByHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochByHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochByHeightResponse.Merge(m, src)
}
func (m *EpochByHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *EpochByHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochByHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EpochByHeightResponse proto.InternalMessageInfo

func (m *EpochByHeightResponse) GetEpoch() *Epoch {
	if m != nil {
		return m.Epoch
	}
	return nil
}

type AnchorByHeightRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *AnchorByHeightRequest) Reset()         { *m = AnchorByHeightRequest{} }
func (m *AnchorByHeightRequest) String() string { return proto.CompactTextString(m) }
func (*AnchorByHeightRequest) ProtoMessage()    {}
func (*AnchorByHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{12}
}
func (m *AnchorByHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorByHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorByHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnchorByHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorByHeightRequest.Merge(m, src)
}
func (m *AnchorByHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *AnchorByHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorByHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorByHeightRequest proto.InternalMessageInfo

func (m *AnchorByHeightRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type AnchorByHeightResponse struct {
	Anchor *v11.MerkleRoot `protobuf:"bytes,1,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (m *AnchorByHeightResponse) Reset()         { *m = AnchorByHeightResponse{} }
func (m *AnchorByHeightResponse) String() string { return proto.CompactTextString(m) }
func (*AnchorByHeightResponse) ProtoMessage()    {}
func (*AnchorByHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{13}
}
func (m *AnchorByHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorByHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorByHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnchorByHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorByHeightResponse.Merge(m, src)
}
func (m *AnchorByHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *AnchorByHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorByHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorByHeightResponse proto.InternalMessageInfo

func (m *AnchorByHeightResponse) GetAnchor() *v11.MerkleRoot {
	if m != nil {
		return m.Anchor
	}
	return nil
}

type TimestampByHeightRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *TimestampByHeightRequest) Reset()         { *m = TimestampByHeightRequest{} }
func (m *TimestampByHeightRequest) String() string { return proto.CompactTextString(m) }
func (*TimestampByHeightRequest) ProtoMessage()    {}
func (*TimestampByHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{14}
}
func (m *TimestampByHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimestampByHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimestampByHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimestampByHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimestampByHeightRequest.Merge(m, src)
}
func (m *TimestampByHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *TimestampByHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TimestampByHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TimestampByHeightRequest proto.InternalMessageInfo

func (m *TimestampByHeightRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type TimestampByHeightResponse struct {
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *TimestampByHeightResponse) Reset()         { *m = TimestampByHeightResponse{} }
func (m *TimestampByHeightResponse) String() string { return proto.CompactTextString(m) }
func (*TimestampByHeightResponse) ProtoMessage()    {}
func (*TimestampByHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{15}
}
func (m *TimestampByHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimestampByHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimestampByHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimestampByHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimestampByHeightResponse.Merge(m, src)
}
func (m *TimestampByHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *TimestampByHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TimestampByHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TimestampByHeightResponse proto.InternalMessageInfo

func (m *TimestampByHeightResponse) GetTimestamp() *timestamppb.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type SctFrontierRequest struct {
	// Whether to include a proof of inclusion for the returned anchor
	WithProof bool `protobuf:"varint,1,opt,name=with_proof,json=withProof,proto3" json:"with_proof,omitempty"`
}

func (m *SctFrontierRequest) Reset()         { *m = SctFrontierRequest{} }
func (m *SctFrontierRequest) String() string { return proto.CompactTextString(m) }
func (*SctFrontierRequest) ProtoMessage()    {}
func (*SctFrontierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{16}
}
func (m *SctFrontierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SctFrontierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SctFrontierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SctFrontierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SctFrontierRequest.Merge(m, src)
}
func (m *SctFrontierRequest) XXX_Size() int {
	return m.Size()
}
func (m *SctFrontierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SctFrontierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SctFrontierRequest proto.InternalMessageInfo

func (m *SctFrontierRequest) GetWithProof() bool {
	if m != nil {
		return m.WithProof
	}
	return false
}

type SctFrontierResponse struct {
	// The height of the frontier we are returning.
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// The SCT anchor at the given height.
	Anchor *v11.MerkleRoot `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	// A blob of bytes that corresponds to the compact frontier
	// at the given height.
	CompactFrontier []byte `protobuf:"bytes,3,opt,name=compact_frontier,json=compactFrontier,proto3" json:"compact_frontier,omitempty"`
	// A proof of existence or non-existence, if requested.
	Proof *types.MerkleProof `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *SctFrontierResponse) Reset()         { *m = SctFrontierResponse{} }
func (m *SctFrontierResponse) String() string { return proto.CompactTextString(m) }
func (*SctFrontierResponse) ProtoMessage()    {}
func (*SctFrontierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f1e312317b2642, []int{17}
}
func (m *SctFrontierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SctFrontierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SctFrontierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SctFrontierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SctFrontierResponse.Merge(m, src)
}
func (m *SctFrontierResponse) XXX_Size() int {
	return m.Size()
}
func (m *SctFrontierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SctFrontierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SctFrontierResponse proto.InternalMessageInfo

func (m *SctFrontierResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *SctFrontierResponse) GetAnchor() *v11.MerkleRoot {
	if m != nil {
		return m.Anchor
	}
	return nil
}

func (m *SctFrontierResponse) GetCompactFrontier() []byte {
	if m != nil {
		return m.CompactFrontier
	}
	return nil
}

func (m *SctFrontierResponse) GetProof() *types.MerkleProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterType((*SctParameters)(nil), "penumbra.core.component.sct.v1.SctParameters")
	proto.RegisterType((*GenesisContent)(nil), "penumbra.core.component.sct.v1.GenesisContent")
	proto.RegisterType((*Epoch)(nil), "penumbra.core.component.sct.v1.Epoch")
	proto.RegisterType((*CommitmentSource)(nil), "penumbra.core.component.sct.v1.CommitmentSource")
	proto.RegisterType((*CommitmentSource_Genesis)(nil), "penumbra.core.component.sct.v1.CommitmentSource.Genesis")
	proto.RegisterType((*CommitmentSource_Transaction)(nil), "penumbra.core.component.sct.v1.CommitmentSource.Transaction")
	proto.RegisterType((*CommitmentSource_FundingStreamReward)(nil), "penumbra.core.component.sct.v1.CommitmentSource.FundingStreamReward")
	proto.RegisterType((*CommitmentSource_CommunityPoolOutput)(nil), "penumbra.core.component.sct.v1.CommitmentSource.CommunityPoolOutput")
	proto.RegisterType((*CommitmentSource_Ics20Transfer)(nil), "penumbra.core.component.sct.v1.CommitmentSource.Ics20Transfer")
	proto.RegisterType((*CommitmentSource_LiquidityTournamentReward)(nil), "penumbra.core.component.sct.v1.CommitmentSource.LiquidityTournamentReward")
	proto.RegisterType((*Nullifier)(nil), "penumbra.core.component.sct.v1.Nullifier")
	proto.RegisterType((*NullificationInfo)(nil), "penumbra.core.component.sct.v1.NullificationInfo")
	proto.RegisterType((*EventCommitment)(nil), "penumbra.core.component.sct.v1.EventCommitment")
	proto.RegisterType((*EventAnchor)(nil), "penumbra.core.component.sct.v1.EventAnchor")
	proto.RegisterType((*EventEpochRoot)(nil), "penumbra.core.component.sct.v1.EventEpochRoot")
	proto.RegisterType((*EventBlockRoot)(nil), "penumbra.core.component.sct.v1.EventBlockRoot")
	proto.RegisterType((*EpochByHeightRequest)(nil), "penumbra.core.component.sct.v1.EpochByHeightRequest")
	proto.RegisterType((*EpochByHeightResponse)(nil), "penumbra.core.component.sct.v1.EpochByHeightResponse")
	proto.RegisterType((*AnchorByHeightRequest)(nil), "penumbra.core.component.sct.v1.AnchorByHeightRequest")
	proto.RegisterType((*AnchorByHeightResponse)(nil), "penumbra.core.component.sct.v1.AnchorByHeightResponse")
	proto.RegisterType((*TimestampByHeightRequest)(nil), "penumbra.core.component.sct.v1.TimestampByHeightRequest")
	proto.RegisterType((*TimestampByHeightResponse)(nil), "penumbra.core.component.sct.v1.TimestampByHeightResponse")
	proto.RegisterType((*SctFrontierRequest)(nil), "penumbra.core.component.sct.v1.SctFrontierRequest")
	proto.RegisterType((*SctFrontierResponse)(nil), "penumbra.core.component.sct.v1.SctFrontierResponse")
}

func init() {
	proto.RegisterFile("penumbra/core/component/sct/v1/sct.proto", fileDescriptor_85f1e312317b2642)
}

var fileDescriptor_85f1e312317b2642 = []byte{
	// 1285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x73, 0x13, 0xc7,
	0x12, 0x96, 0x84, 0xb1, 0xad, 0x96, 0x6d, 0x60, 0x8c, 0x29, 0xa1, 0x2a, 0x04, 0xec, 0x7b, 0x3c,
	0x78, 0xaf, 0xea, 0xad, 0x90, 0x08, 0x2e, 0x10, 0xa9, 0xfc, 0xb0, 0xf8, 0x21, 0xa7, 0x20, 0x51,
	0x56, 0x0e, 0x87, 0x94, 0x8b, 0xcd, 0x7a, 0x34, 0xb2, 0xa6, 0x90, 0x76, 0xd6, 0x33, 0xb3, 0xc2,
	0x4e, 0xa5, 0x2a, 0xd7, 0x1c, 0x39, 0xa6, 0x92, 0x5b, 0x8e, 0xb9, 0xe7, 0x9e, 0x63, 0x2a, 0x97,
	0x70, 0xcc, 0x31, 0x65, 0x6e, 0xfc, 0x15, 0xa9, 0x99, 0x9d, 0x5d, 0xad, 0x84, 0x8d, 0x2d, 0xc8,
	0xc5, 0xde, 0xe9, 0xed, 0xee, 0xef, 0x9b, 0x9e, 0xaf, 0x7b, 0x56, 0x70, 0x2d, 0x20, 0x7e, 0x38,
	0xd8, 0xe2, 0x5e, 0x05, 0x33, 0x4e, 0x2a, 0x98, 0x0d, 0x02, 0xe6, 0x13, 0x5f, 0x56, 0x04, 0x96,
	0x95, 0x61, 0x55, 0xfd, 0xb3, 0x03, 0xce, 0x24, 0x43, 0xe5, 0xd8, 0xd3, 0x56, 0x9e, 0x76, 0xe2,
	0x69, 0x2b, 0x97, 0x61, 0xb5, 0x74, 0x69, 0x94, 0x89, 0xef, 0x05, 0x92, 0x55, 0x64, 0x94, 0x41,
	0xc6, 0x19, 0x4a, 0xff, 0x1e, 0xc7, 0x92, 0xbb, 0x3d, 0x4f, 0xf4, 0xb4, 0x8b, 0x7e, 0x32, 0x5e,
	0x17, 0xb7, 0x19, 0xdb, 0xee, 0x93, 0x8a, 0x5e, 0x6d, 0x85, 0xdd, 0x8a, 0xa4, 0x03, 0x22, 0xa4,
	0x37, 0x08, 0x8c, 0xc3, 0x55, 0xba, 0x85, 0x13, 0xb6, 0x03, 0x2a, 0x07, 0x8a, 0xee, 0xb0, 0x9a,
	0x5a, 0x45, 0x8e, 0xd6, 0x2a, 0x2c, 0xb6, 0xb1, 0x6c, 0x79, 0xdc, 0x1b, 0x10, 0x49, 0xb8, 0x40,
	0x57, 0x60, 0x89, 0x04, 0x0c, 0xf7, 0xdc, 0x4e, 0xc8, 0x3d, 0x49, 0x99, 0x5f, 0xcc, 0x5e, 0xca,
	0x5e, 0x9b, 0x71, 0x16, 0xb5, 0xf5, 0xae, 0x31, 0x5a, 0x4f, 0x60, 0xe9, 0x01, 0xf1, 0x89, 0xa0,
	0xa2, 0xc1, 0x7c, 0x49, 0x7c, 0x89, 0x1e, 0x02, 0x08, 0x2c, 0xdd, 0x40, 0xa5, 0x12, 0x3a, 0xa8,
	0x50, 0xfb, 0xbf, 0xfd, 0xe6, 0x82, 0xd8, 0x63, 0xd8, 0x4e, 0x5e, 0x98, 0xa5, 0xb0, 0x3e, 0x82,
	0x93, 0xf7, 0x14, 0x20, 0x3a, 0x0b, 0x27, 0xa9, 0xdf, 0x21, 0xbb, 0x86, 0x46, 0xb4, 0x40, 0x97,
	0x61, 0x41, 0x48, 0x8f, 0x4b, 0xb7, 0x47, 0xe8, 0x76, 0x4f, 0x16, 0x73, 0xfa, 0x65, 0x41, 0xdb,
	0x9a, 0xda, 0x64, 0xbd, 0x9a, 0x83, 0xd3, 0x8d, 0x64, 0xbb, 0x6d, 0x16, 0x72, 0x4c, 0xd0, 0x57,
	0x50, 0x90, 0xdc, 0xf3, 0x85, 0x87, 0x93, 0xad, 0x15, 0x6a, 0xef, 0x1f, 0xc5, 0x72, 0x32, 0x8d,
	0xbd, 0x31, 0xca, 0xd1, 0xcc, 0x38, 0xe9, 0x94, 0xa8, 0x07, 0xa7, 0x28, 0x16, 0x6e, 0xed, 0xba,
	0xab, 0xad, 0x5d, 0xc2, 0x35, 0xb9, 0x42, 0xed, 0x83, 0xa9, 0x51, 0xd6, 0xb1, 0xa8, 0x5d, 0xdf,
	0x30, 0x59, 0x9a, 0x19, 0x67, 0x91, 0xa6, 0x0d, 0xe8, 0x6b, 0x58, 0xe9, 0x86, 0x7e, 0x87, 0xfa,
	0xdb, 0xae, 0x90, 0x9c, 0x78, 0x03, 0x97, 0x93, 0x67, 0x1e, 0xef, 0x14, 0xcf, 0x6a, 0xbc, 0xbb,
	0x53, 0xe3, 0xdd, 0x8f, 0xb2, 0xb5, 0x75, 0x32, 0x47, 0xe7, 0x6a, 0x66, 0x9c, 0xe5, 0xee, 0xeb,
	0x66, 0x85, 0xad, 0xa4, 0x14, 0xfa, 0x54, 0xee, 0xb9, 0x01, 0x63, 0x7d, 0x97, 0x85, 0x32, 0x08,
	0x65, 0xb1, 0xfc, 0x96, 0xd8, 0x8d, 0x38, 0x5b, 0x8b, 0xb1, 0xfe, 0x67, 0x3a, 0x97, 0xc2, 0xc6,
	0xaf, 0x9b, 0xd1, 0x06, 0xcc, 0x6d, 0x47, 0xd2, 0x2b, 0x5e, 0xd3, 0x68, 0xb7, 0xa6, 0x46, 0x33,
	0xd2, 0x6d, 0x66, 0x9c, 0x38, 0x15, 0x7a, 0x02, 0x27, 0xfa, 0x3b, 0xb2, 0x58, 0xd3, 0x19, 0x3f,
	0x99, 0x3a, 0xe3, 0x43, 0xba, 0x13, 0xd2, 0x0e, 0x95, 0x7b, 0x1b, 0x2c, 0xe4, 0xbe, 0xa7, 0xde,
	0x24, 0x15, 0x54, 0x89, 0x4b, 0x79, 0x98, 0x33, 0xa8, 0xa5, 0x0b, 0x50, 0x48, 0x09, 0x08, 0x2d,
	0x41, 0x8e, 0x76, 0xb4, 0x14, 0x17, 0x9c, 0x1c, 0xed, 0x94, 0x56, 0x61, 0xf9, 0x80, 0x93, 0x40,
	0x17, 0xa1, 0x10, 0x35, 0x66, 0xba, 0x1d, 0x40, 0x9b, 0xd6, 0x95, 0xa5, 0xb4, 0x02, 0xcb, 0x07,
	0x54, 0xb1, 0x44, 0x60, 0x71, 0x4c, 0x48, 0xe8, 0x02, 0x40, 0xe0, 0xe1, 0xa7, 0x44, 0xba, 0x82,
	0xec, 0x98, 0x3c, 0xf9, 0xc8, 0xd2, 0x26, 0x3b, 0xea, 0x35, 0xee, 0x79, 0xbe, 0x4f, 0xfa, 0x2e,
	0xed, 0x68, 0xed, 0xe6, 0x9d, 0xbc, 0xb1, 0xac, 0x77, 0xd0, 0x39, 0x98, 0x15, 0xc4, 0xef, 0x10,
	0x5e, 0x3c, 0xa1, 0x5f, 0x99, 0x55, 0x89, 0xc3, 0xf9, 0x43, 0x6b, 0xa0, 0x9a, 0x58, 0x13, 0x8d,
	0x9b, 0x58, 0x2f, 0xd0, 0x87, 0x30, 0x27, 0x77, 0x5d, 0x35, 0xd6, 0x4c, 0x8b, 0xfc, 0x67, 0xa2,
	0xec, 0x66, 0xe6, 0x0d, 0xab, 0xe9, 0x86, 0x5b, 0xef, 0x38, 0xb3, 0x72, 0xb7, 0xe9, 0x89, 0xde,
	0xda, 0x3c, 0xcc, 0x0a, 0x5d, 0x7e, 0xeb, 0x32, 0xe4, 0x3f, 0x0d, 0xfb, 0x7d, 0xda, 0xa5, 0x84,
	0x47, 0x23, 0xc3, 0x27, 0xdc, 0xd4, 0x34, 0x5a, 0x58, 0xf7, 0xe1, 0x8c, 0x71, 0xc1, 0x7a, 0x84,
	0xad, 0xfb, 0x5d, 0x36, 0x59, 0x7b, 0x3d, 0x57, 0x02, 0xe2, 0x77, 0x26, 0xe7, 0x8a, 0xb2, 0x99,
	0xb9, 0xf2, 0x6b, 0x16, 0x4e, 0xdd, 0x1b, 0x12, 0x5f, 0x8e, 0x34, 0x80, 0x1e, 0x00, 0x8c, 0x26,
	0xab, 0x99, 0x2a, 0x57, 0x53, 0x9b, 0xd1, 0xc3, 0xde, 0x96, 0x66, 0xe6, 0x49, 0x4f, 0x92, 0x51,
	0xb0, 0x93, 0x0a, 0x45, 0x25, 0x98, 0x0f, 0x98, 0xa0, 0x7a, 0x38, 0x45, 0xd8, 0xc9, 0x1a, 0x35,
	0xe3, 0xdd, 0xea, 0xca, 0x17, 0x6a, 0xd7, 0xa7, 0x15, 0xa9, 0x13, 0x57, 0xeb, 0xc7, 0x2c, 0x14,
	0xf4, 0x16, 0x3e, 0xf6, 0x71, 0x8f, 0x71, 0x54, 0x87, 0x59, 0x4f, 0x3f, 0x19, 0xea, 0xd6, 0x61,
	0xd4, 0x1f, 0x11, 0xfe, 0xb4, 0x4f, 0x1c, 0xc6, 0xa4, 0x63, 0x22, 0x94, 0x1e, 0xc6, 0x6a, 0x65,
	0x56, 0xe8, 0x16, 0xe4, 0x93, 0x4b, 0xc9, 0x10, 0x2e, 0xd9, 0xd1, 0xb5, 0x65, 0xc7, 0xd7, 0x96,
	0xbd, 0x11, 0x7b, 0x38, 0x23, 0x67, 0xeb, 0xfb, 0x2c, 0x2c, 0x69, 0x76, 0xfa, 0x02, 0x50, 0x60,
	0x68, 0x15, 0x66, 0x38, 0x63, 0x72, 0x0a, 0x7a, 0xda, 0x7f, 0x74, 0x79, 0xe4, 0xd2, 0x97, 0xc7,
	0xdb, 0x53, 0xfb, 0x21, 0xa6, 0xb6, 0xd6, 0x67, 0xf8, 0xe9, 0x3b, 0x51, 0xfb, 0xe7, 0xeb, 0x66,
	0xc3, 0x59, 0x5d, 0xb1, 0xb5, 0xbd, 0x48, 0xa9, 0x0e, 0xd9, 0x09, 0x89, 0x48, 0x23, 0x65, 0xd3,
	0x48, 0xd6, 0x06, 0xac, 0x4c, 0xf8, 0x8b, 0x80, 0xf9, 0x82, 0xa0, 0x3b, 0xe9, 0x6e, 0x2d, 0xd4,
	0xae, 0x1c, 0xa5, 0xb3, 0xe8, 0x9c, 0xa2, 0x18, 0xab, 0x02, 0x2b, 0x91, 0xaa, 0x8e, 0x4f, 0xe3,
	0xdc, 0x64, 0x80, 0xe1, 0xf1, 0x0e, 0xb2, 0xb4, 0x6a, 0x50, 0x4c, 0x8a, 0x74, 0x5c, 0x26, 0x5f,
	0xc0, 0xf9, 0x03, 0x62, 0x0c, 0x99, 0xb1, 0x73, 0xc9, 0x4e, 0x73, 0x2e, 0x37, 0x00, 0xb5, 0xb1,
	0xbc, 0xcf, 0x99, 0x2f, 0x29, 0xe1, 0x31, 0x89, 0x0b, 0x00, 0xcf, 0xa8, 0xec, 0xb9, 0x01, 0x67,
	0xac, 0xab, 0x13, 0xce, 0x3b, 0x79, 0x65, 0x69, 0x29, 0x83, 0xf5, 0x47, 0x16, 0x96, 0xc7, 0xa2,
	0x0c, 0x8d, 0x43, 0xb8, 0xa7, 0x6a, 0x95, 0x9b, 0xba, 0x85, 0xff, 0x0b, 0xa7, 0xd5, 0x99, 0x7a,
	0x58, 0xba, 0x5d, 0x83, 0xa7, 0x95, 0xb7, 0xe0, 0x9c, 0x32, 0xf6, 0x98, 0x06, 0xba, 0x0d, 0x27,
	0x23, 0xc2, 0x33, 0x1a, 0xe5, 0x5f, 0x36, 0xdd, 0xc2, 0x89, 0x2a, 0xe2, 0x2f, 0xcb, 0x04, 0x45,
	0x6f, 0xc5, 0x89, 0x22, 0x6a, 0xcf, 0x67, 0x60, 0xe1, 0xf3, 0x90, 0xf0, 0xbd, 0x36, 0xe1, 0x43,
	0x8a, 0x09, 0xfa, 0x16, 0x96, 0xc6, 0x0f, 0x1e, 0xdd, 0x3c, 0x4a, 0x69, 0x07, 0x2a, 0xab, 0xb4,
	0x3a, 0x6d, 0x98, 0xa9, 0xe5, 0x37, 0xb0, 0x38, 0xd6, 0x00, 0xe8, 0xbd, 0x63, 0x29, 0x7d, 0x12,
	0xfe, 0xe6, 0x94, 0x51, 0x06, 0xfd, 0xbb, 0x2c, 0x9c, 0x79, 0x4d, 0x6e, 0xe8, 0xc8, 0x6f, 0x99,
	0xc3, 0x54, 0x5d, 0xba, 0xfd, 0x16, 0x91, 0x86, 0xca, 0x10, 0x0a, 0x29, 0xad, 0xa1, 0xda, 0x31,
	0xbe, 0xda, 0x27, 0xe4, 0x5c, 0xba, 0x31, 0x55, 0x4c, 0x84, 0xbb, 0xf6, 0x4b, 0xee, 0xb7, 0xfd,
	0x72, 0xf6, 0xc5, 0x7e, 0x39, 0xfb, 0xd7, 0x7e, 0x39, 0xfb, 0xfc, 0x65, 0x39, 0xf3, 0xe2, 0x65,
	0x39, 0xf3, 0xe7, 0xcb, 0x72, 0x06, 0x2c, 0xcc, 0x06, 0x47, 0xa4, 0x5c, 0x9b, 0x57, 0xbf, 0x1e,
	0x54, 0xeb, 0xb5, 0xb2, 0x5f, 0xb6, 0xb6, 0xa9, 0xec, 0x85, 0x5b, 0xca, 0xa9, 0x82, 0x99, 0x18,
	0x30, 0x51, 0xe1, 0xa4, 0xef, 0xed, 0x11, 0x5e, 0x19, 0xd6, 0x92, 0x47, 0xdc, 0xf3, 0xa8, 0x2f,
	0x2a, 0x6f, 0xfe, 0x3d, 0x77, 0x47, 0x60, 0x39, 0xac, 0xfe, 0x94, 0x9b, 0x69, 0x35, 0x1a, 0xed,
	0x9f, 0x73, 0xe5, 0x56, 0xcc, 0xa2, 0xa1, 0x58, 0x34, 0x12, 0x16, 0x6d, 0x2c, 0xed, 0xc7, 0xd5,
	0xdf, 0x47, 0x0e, 0x9b, 0xca, 0x61, 0x33, 0x71, 0xd8, 0x6c, 0x63, 0xb9, 0xf9, 0xb8, 0xba, 0x9f,
	0xfb, 0xdf, 0x9b, 0x1d, 0x36, 0x1f, 0xb4, 0xd6, 0x1e, 0x11, 0xe9, 0x75, 0x3c, 0xe9, 0xbd, 0xca,
	0x59, 0xb1, 0x73, 0xbd, 0xae, 0xbc, 0xd5, 0x5f, 0xe3, 0x5e, 0xaf, 0xb7, 0xb1, 0xac, 0xd7, 0x1f,
	0x57, 0xb7, 0x66, 0xf5, 0xc0, 0xb9, 0xf1, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x69, 0x27, 0x92,
	0xc7, 0x99, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	AnchorByHeight(ctx context.Context, in *AnchorByHeightRequest, opts ...grpc.CallOption) (*AnchorByHeightResponse, error)
	EpochByHeight(ctx context.Context, in *EpochByHeightRequest, opts ...grpc.CallOption) (*EpochByHeightResponse, error)
	TimestampByHeight(ctx context.Context, in *TimestampByHeightRequest, opts ...grpc.CallOption) (*TimestampByHeightResponse, error)
	SctFrontier(ctx context.Context, in *SctFrontierRequest, opts ...grpc.CallOption) (*SctFrontierResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) AnchorByHeight(ctx context.Context, in *AnchorByHeightRequest, opts ...grpc.CallOption) (*AnchorByHeightResponse, error) {
	out := new(AnchorByHeightResponse)
	err := c.cc.Invoke(ctx, "/penumbra.core.component.sct.v1.QueryService/AnchorByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) EpochByHeight(ctx context.Context, in *EpochByHeightRequest, opts ...grpc.CallOption) (*EpochByHeightResponse, error) {
	out := new(EpochByHeightResponse)
	err := c.cc.Invoke(ctx, "/penumbra.core.component.sct.v1.QueryService/EpochByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) TimestampByHeight(ctx context.Context, in *TimestampByHeightRequest, opts ...grpc.CallOption) (*TimestampByHeightResponse, error) {
	out := new(TimestampByHeightResponse)
	err := c.cc.Invoke(ctx, "/penumbra.core.component.sct.v1.QueryService/TimestampByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) SctFrontier(ctx context.Context, in *SctFrontierRequest, opts ...grpc.CallOption) (*SctFrontierResponse, error) {
	out := new(SctFrontierResponse)
	err := c.cc.Invoke(ctx, "/penumbra.core.component.sct.v1.QueryService/SctFrontier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	AnchorByHeight(context.Context, *AnchorByHeightRequest) (*AnchorByHeightResponse, error)
	EpochByHeight(context.Context, *EpochByHeightRequest) (*EpochByHeightResponse, error)
	TimestampByHeight(context.Context, *TimestampByHeightRequest) (*TimestampByHeightResponse, error)
	SctFrontier(context.Context, *SctFrontierRequest) (*SctFrontierResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) AnchorByHeight(ctx context.Context, req *AnchorByHeightRequest) (*AnchorByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnchorByHeight not implemented")
}
func (*UnimplementedQueryServiceServer) EpochByHeight(ctx context.Context, req *EpochByHeightRequest) (*EpochByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochByHeight not implemented")
}
func (*UnimplementedQueryServiceServer) TimestampByHeight(ctx context.Context, req *TimestampByHeightRequest) (*TimestampByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimestampByHeight not implemented")
}
func (*UnimplementedQueryServiceServer) SctFrontier(ctx context.Context, req *SctFrontierRequest) (*SctFrontierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SctFrontier not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_AnchorByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnchorByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).AnchorByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.core.component.sct.v1.QueryService/AnchorByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).AnchorByHeight(ctx, req.(*AnchorByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_EpochByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpochByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).EpochByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.core.component.sct.v1.QueryService/EpochByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).EpochByHeight(ctx, req.(*EpochByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_TimestampByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimestampByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).TimestampByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.core.component.sct.v1.QueryService/TimestampByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).TimestampByHeight(ctx, req.(*TimestampByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_SctFrontier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SctFrontierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).SctFrontier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.core.component.sct.v1.QueryService/SctFrontier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).SctFrontier(ctx, req.(*SctFrontierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "penumbra.core.component.sct.v1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnchorByHeight",
			Handler:    _QueryService_AnchorByHeight_Handler,
		},
		{
			MethodName: "EpochByHeight",
			Handler:    _QueryService_EpochByHeight_Handler,
		},
		{
			MethodName: "TimestampByHeight",
			Handler:    _QueryService_TimestampByHeight_Handler,
		},
		{
			MethodName: "SctFrontier",
			Handler:    _QueryService_SctFrontier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "penumbra/core/component/sct/v1/sct.proto",
}

func (m *SctParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SctParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SctParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochDuration != 0 {
		i = encodeVarintSct(dAtA, i, uint64(m.EpochDuration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SctParams != nil {
		{
			size, err := m.SctParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Epoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartHeight != 0 {
		i = encodeVarintSct(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintSct(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommitmentSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitmentSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		{
			size := m.Source.Size()
			i -= size
			if _, err := m.Source.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CommitmentSource_Transaction_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentSource_Transaction_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CommitmentSource_Ics_20Transfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentSource_Ics_20Transfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ics_20Transfer != nil {
		{
			size, err := m.Ics_20Transfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CommitmentSource_FundingStreamReward_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentSource_FundingStreamReward_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FundingStreamReward != nil {
		{
			size, err := m.FundingStreamReward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CommitmentSource_CommunityPoolOutput_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentSource_CommunityPoolOutput_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommunityPoolOutput != nil {
		{
			size, err := m.CommunityPoolOutput.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *CommitmentSource_Genesis_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentSource_Genesis_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Genesis != nil {
		{
			size, err := m.Genesis.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *CommitmentSource_Lqt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentSource_Lqt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Lqt != nil {
		{
			size, err := m.Lqt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CommitmentSource_Genesis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitmentSource_Genesis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentSource_Genesis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CommitmentSource_Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitmentSource_Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentSource_Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSct(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommitmentSource_FundingStreamReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitmentSource_FundingStreamReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentSource_FundingStreamReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochIndex != 0 {
		i = encodeVarintSct(dAtA, i, uint64(m.EpochIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommitmentSource_CommunityPoolOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitmentSource_CommunityPoolOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentSource_CommunityPoolOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CommitmentSource_Ics20Transfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitmentSource_Ics20Transfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentSource_Ics20Transfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintSct(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintSct(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if m.PacketSeq != 0 {
		i = encodeVarintSct(dAtA, i, uint64(m.PacketSeq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommitmentSource_LiquidityTournamentReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitmentSource_LiquidityTournamentReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentSource_LiquidityTournamentReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxHash != nil {
		{
			size, err := m.TxHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintSct(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Nullifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Nullifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Nullifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintSct(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NullificationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullificationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullificationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpendHeight != 0 {
		i = encodeVarintSct(dAtA, i, uint64(m.SpendHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSct(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCommitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCommitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCommitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Position != 0 {
		i = encodeVarintSct(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x10
	}
	if m.Commitment != nil {
		{
			size, err := m.Commitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAnchor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAnchor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAnchor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintSct(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Anchor != nil {
		{
			size, err := m.Anchor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventEpochRoot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventEpochRoot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventEpochRoot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != 0 {
		i = encodeVarintSct(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Root != nil {
		{
			size, err := m.Root.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBlockRoot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBlockRoot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBlockRoot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintSct(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Root != nil {
		{
			size, err := m.Root.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EpochByHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochByHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochByHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintSct(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochByHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochByHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochByHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != nil {
		{
			size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnchorByHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorByHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnchorByHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintSct(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AnchorByHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorByHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnchorByHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Anchor != nil {
		{
			size, err := m.Anchor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimestampByHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimestampByHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimestampByHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintSct(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TimestampByHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimestampByHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimestampByHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SctFrontierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SctFrontierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SctFrontierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithProof {
		i--
		if m.WithProof {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SctFrontierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SctFrontierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SctFrontierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.CompactFrontier) > 0 {
		i -= len(m.CompactFrontier)
		copy(dAtA[i:], m.CompactFrontier)
		i = encodeVarintSct(dAtA, i, uint64(len(m.CompactFrontier)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Anchor != nil {
		{
			size, err := m.Anchor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintSct(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSct(dAtA []byte, offset int, v uint64) int {
	offset -= sovSct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SctParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochDuration != 0 {
		n += 1 + sovSct(uint64(m.EpochDuration))
	}
	return n
}

func (m *GenesisContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SctParams != nil {
		l = m.SctParams.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func (m *Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovSct(uint64(m.Index))
	}
	if m.StartHeight != 0 {
		n += 1 + sovSct(uint64(m.StartHeight))
	}
	return n
}

func (m *CommitmentSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Source != nil {
		n += m.Source.Size()
	}
	return n
}

func (m *CommitmentSource_Transaction_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}
func (m *CommitmentSource_Ics_20Transfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ics_20Transfer != nil {
		l = m.Ics_20Transfer.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}
func (m *CommitmentSource_FundingStreamReward_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FundingStreamReward != nil {
		l = m.FundingStreamReward.Size()
		n += 2 + l + sovSct(uint64(l))
	}
	return n
}
func (m *CommitmentSource_CommunityPoolOutput_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommunityPoolOutput != nil {
		l = m.CommunityPoolOutput.Size()
		n += 2 + l + sovSct(uint64(l))
	}
	return n
}
func (m *CommitmentSource_Genesis_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Genesis != nil {
		l = m.Genesis.Size()
		n += 2 + l + sovSct(uint64(l))
	}
	return n
}
func (m *CommitmentSource_Lqt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lqt != nil {
		l = m.Lqt.Size()
		n += 2 + l + sovSct(uint64(l))
	}
	return n
}
func (m *CommitmentSource_Genesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CommitmentSource_Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func (m *CommitmentSource_FundingStreamReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochIndex != 0 {
		n += 1 + sovSct(uint64(m.EpochIndex))
	}
	return n
}

func (m *CommitmentSource_CommunityPoolOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CommitmentSource_Ics20Transfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PacketSeq != 0 {
		n += 1 + sovSct(uint64(m.PacketSeq))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovSct(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func (m *CommitmentSource_LiquidityTournamentReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovSct(uint64(m.Epoch))
	}
	if m.TxHash != nil {
		l = m.TxHash.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func (m *Nullifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func (m *NullificationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSct(uint64(l))
	}
	if m.SpendHeight != 0 {
		n += 1 + sovSct(uint64(m.SpendHeight))
	}
	return n
}

func (m *EventCommitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Commitment != nil {
		l = m.Commitment.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovSct(uint64(m.Position))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func (m *EventAnchor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Anchor != nil {
		l = m.Anchor.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovSct(uint64(m.Height))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func (m *EventEpochRoot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Root != nil {
		l = m.Root.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovSct(uint64(m.Index))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func (m *EventBlockRoot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Root != nil {
		l = m.Root.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovSct(uint64(m.Height))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func (m *EpochByHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovSct(uint64(m.Height))
	}
	return n
}

func (m *EpochByHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func (m *AnchorByHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovSct(uint64(m.Height))
	}
	return n
}

func (m *AnchorByHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Anchor != nil {
		l = m.Anchor.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func (m *TimestampByHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovSct(uint64(m.Height))
	}
	return n
}

func (m *TimestampByHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func (m *SctFrontierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WithProof {
		n += 2
	}
	return n
}

func (m *SctFrontierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovSct(uint64(m.Height))
	}
	if m.Anchor != nil {
		l = m.Anchor.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	l = len(m.CompactFrontier)
	if l > 0 {
		n += 1 + l + sovSct(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func sovSct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSct(x uint64) (n int) {
	return sovSct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SctParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SctParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SctParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochDuration", wireType)
			}
			m.EpochDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SctParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SctParams == nil {
				m.SctParams = &SctParameters{}
			}
			if err := m.SctParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Epoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Epoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Epoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitmentSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitmentSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitmentSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommitmentSource_Transaction{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &CommitmentSource_Transaction_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ics_20Transfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommitmentSource_Ics20Transfer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &CommitmentSource_Ics_20Transfer{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingStreamReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommitmentSource_FundingStreamReward{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &CommitmentSource_FundingStreamReward_{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolOutput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommitmentSource_CommunityPoolOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &CommitmentSource_CommunityPoolOutput_{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genesis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommitmentSource_Genesis{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &CommitmentSource_Genesis_{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lqt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommitmentSource_LiquidityTournamentReward{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &CommitmentSource_Lqt{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitmentSource_Genesis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Genesis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Genesis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitmentSource_Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitmentSource_FundingStreamReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundingStreamReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundingStreamReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIndex", wireType)
			}
			m.EpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitmentSource_CommunityPoolOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityPoolOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityPoolOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitmentSource_Ics20Transfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ics20Transfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ics20Transfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketSeq", wireType)
			}
			m.PacketSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitmentSource_LiquidityTournamentReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityTournamentReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityTournamentReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxHash == nil {
				m.TxHash = &v1.TransactionId{}
			}
			if err := m.TxHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Nullifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nullifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nullifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullificationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullificationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullificationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendHeight", wireType)
			}
			m.SpendHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpendHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCommitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCommitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCommitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commitment == nil {
				m.Commitment = &v11.StateCommitment{}
			}
			if err := m.Commitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &CommitmentSource{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAnchor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAnchor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAnchor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anchor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Anchor == nil {
				m.Anchor = &v11.MerkleRoot{}
			}
			if err := m.Anchor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &timestamppb.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventEpochRoot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventEpochRoot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventEpochRoot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Root == nil {
				m.Root = &v11.MerkleRoot{}
			}
			if err := m.Root.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &timestamppb.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBlockRoot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBlockRoot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBlockRoot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Root == nil {
				m.Root = &v11.MerkleRoot{}
			}
			if err := m.Root.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &timestamppb.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochByHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochByHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochByHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochByHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochByHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochByHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Epoch == nil {
				m.Epoch = &Epoch{}
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorByHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorByHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorByHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorByHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorByHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorByHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anchor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Anchor == nil {
				m.Anchor = &v11.MerkleRoot{}
			}
			if err := m.Anchor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimestampByHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimestampByHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimestampByHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimestampByHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimestampByHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimestampByHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &timestamppb.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SctFrontierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SctFrontierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SctFrontierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithProof", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithProof = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SctFrontierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SctFrontierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SctFrontierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anchor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Anchor == nil {
				m.Anchor = &v11.MerkleRoot{}
			}
			if err := m.Anchor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactFrontier", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompactFrontier = append(m.CompactFrontier[:0], dAtA[iNdEx:postIndex]...)
			if m.CompactFrontier == nil {
				m.CompactFrontier = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &types.MerkleProof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSct
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSct
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSct
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSct        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSct          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSct = fmt.Errorf("proto: unexpected end of group")
)
